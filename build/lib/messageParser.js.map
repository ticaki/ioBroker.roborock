{"version":3,"file":"messageParser.js","sourceRoot":"","sources":["../../src/lib/messageParser.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Roborock } from \"../main\";\r\nimport { cryptoEngine } from \"./cryptoEngine\";\r\n\r\nimport CRC32 from \"crc-32\";\r\nimport { Parser } from \"binary-parser\";\r\n\r\nconst HEADER_LEN = 3 + 4 + 4 + 4 + 2 + 2; // version + seq + random + timestamp + protocol + payloadLen\r\nconst CRC32_LEN = 4; // CRC32 length\r\n\r\n// Global rolling counter\r\nlet seq = 1;\r\nlet random = 4711;\r\n\r\nconst frameParser = new Parser()\r\n\t.endianess(\"big\")\r\n\t.string(\"version\", { length: 3 })\r\n\t.uint32(\"seq\")\r\n\t.uint32(\"random\")\r\n\t.uint32(\"timestamp\")\r\n\t.uint16(\"protocol\")\r\n\t.uint16(\"payloadLen\")\r\n\t.buffer(\"payload\", { length: \"payloadLen\" })\r\n\t.uint32(\"crc32\");\r\n\r\nexport class messageParser {\r\n\tadapter: Roborock;\r\n\r\n\tconstructor(adapter: Roborock) {\r\n\t\tthis.adapter = adapter;\r\n\t}\r\n\r\n\t/**\r\n\t * Decodes one or more messages from a buffer.\r\n\t */\r\n\t_decodeMsg(message: Buffer, duid: string) {\r\n\t\tconst decoded: any[] = [];\r\n\t\tlet offset = 0;\r\n\r\n\t\twhile (offset + 3 <= message.length) {\r\n\t\t\tconst version = message.toString(\"latin1\", offset, offset + 3);\r\n\t\t\tif (![\"1.0\", \"A01\", \"L01\"].includes(version)) {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Unsupported version \"${version}\" at offset ${offset}`);\r\n\t\t\t\toffset++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet data: any;\r\n\t\t\ttry {\r\n\t\t\t\tdata = frameParser.parse(message.subarray(offset));\r\n\t\t\t} catch (err) {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Parse failed at offset ${offset}: ${err}`);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tconst msgLen = HEADER_LEN + data.payloadLen + CRC32_LEN;\r\n\t\t\tif (msgLen <= 0 || offset + msgLen > message.length) break;\r\n\r\n\t\t\t// Check CRC\r\n\t\t\tconst msgBuffer = message.subarray(offset, offset + msgLen);\r\n\t\t\tconst crc32 = CRC32.buf(msgBuffer.subarray(0, msgLen - 4)) >>> 0;\r\n\t\t\tif (crc32 !== msgBuffer.readUInt32BE(msgLen - 4)) {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] CRC32 mismatch at offset ${offset}`);\r\n\t\t\t\toffset += msgLen;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Retrieve key\r\n\t\t\tconst localKey = this.adapter.http_api.getMatchedLocalKeys().get(duid);\r\n\t\t\tif (!localKey) {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] No localKey for DUID ${duid}`);\r\n\t\t\t\toffset += msgLen;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Decrypt payload\r\n\t\t\tconst frame = { ...data };\r\n\t\t\ttry {\r\n\t\t\t\tif (version === \"1.0\") {\r\n\t\t\t\t\tframe.payload = cryptoEngine.decryptV1(frame.payload, localKey, frame.timestamp);\r\n\t\t\t\t} else if (version === \"A01\") {\r\n\t\t\t\t\tframe.payload = cryptoEngine.decryptA01(frame.payload, localKey, frame.random);\r\n\t\t\t\t} else if (version === \"L01\") {\r\n\t\t\t\t\tframe.payload = cryptoEngine.decryptL01(\r\n\t\t\t\t\t\tframe.payload,\r\n\t\t\t\t\t\tlocalKey,\r\n\t\t\t\t\t\tframe.timestamp,\r\n\t\t\t\t\t\tframe.seq,\r\n\t\t\t\t\t\tframe.random,\r\n\t\t\t\t\t\tthis.adapter.connectNonce,\r\n\t\t\t\t\t\tthis.adapter.ackNonce?.get(duid)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tdelete frame.payloadLen;\r\n\t\t\t\tdecoded.push(frame);\r\n\t\t\t} catch (err: any) {\r\n\t\t\t\tthis.adapter.log.error(`[_decodeMsg] Decrypt failed: ${err?.stack || err}`);\r\n\t\t\t}\r\n\r\n\t\t\toffset += msgLen;\r\n\t\t}\r\n\r\n\t\tif (decoded.length === 0) return null;\r\n\t\treturn decoded.length === 1 ? decoded[0] : decoded;\r\n\t}\r\n\r\n\t/**\r\n\t * Builds the JSON payload for the device.\r\n\t */\r\n\tasync buildPayload(duid: string, protocol: number, messageID: number, method: string, params: any) {\r\n\t\tconst timestamp = Math.floor(Date.now() / 1000);\r\n\t\tconst endpoint = await this.adapter.mqtt_api.ensureEndpoint();\r\n\t\tconst version = await this.adapter.getDeviceProtocolVersion(duid);\r\n\r\n\t\tif (version === \"A01\") {\r\n\t\t\treturn JSON.stringify({ dps: { [method]: params }, t: timestamp });\r\n\t\t}\r\n\r\n\t\tconst inner: any = { id: messageID, method, params };\r\n\r\n\t\tif (method === \"get_photo\") {\r\n\t\t\tconst kp = cryptoEngine.ensureRsaKeys();\r\n\t\t\t(params as any).endpoint = endpoint;\r\n\t\t\t(params as any).security = { cipher_suite: 0, pub_key: kp.public };\r\n\t\t} else if ([\"get_map_v1\", \"get_clean_record_map\"].includes(method)) {\r\n\t\t\tinner.security = { endpoint, nonce: this.adapter.nonce.toString(\"hex\").toUpperCase() };\r\n\t\t}\r\n\r\n\t\treturn JSON.stringify({ dps: { [protocol]: JSON.stringify(inner) }, t: timestamp });\r\n\t}\r\n\r\n\t/**\r\n\t * Builds the final Roborock frame and encrypts the payload.\r\n\t */\r\n\tasync buildRoborockMessage(duid: string, protocol: number, timestamp: number, payload: string | Buffer) {\r\n\t\tconst version = await this.adapter.getDeviceProtocolVersion(duid);\r\n\t\tconst localKey = this.adapter.http_api.getMatchedLocalKeys().get(duid);\r\n\r\n\t\tif (!localKey) return false;\r\n\r\n\t\tconst payloadBuf = Buffer.isBuffer(payload) ? payload : Buffer.from(payload, \"utf-8\");\r\n\t\tlet encrypted: Buffer | undefined;\r\n\r\n\t\ttry {\r\n\t\t\tif (version === \"1.0\") {\r\n\t\t\t\tencrypted = cryptoEngine.encryptV1(payloadBuf, localKey, timestamp);\r\n\t\t\t} else if (version === \"A01\") {\r\n\t\t\t\tencrypted = cryptoEngine.encryptA01(payloadBuf, localKey, random);\r\n\t\t\t} else if (version === \"L01\") {\r\n\t\t\t\tencrypted = cryptoEngine.encryptL01(payloadBuf, localKey, timestamp, seq, random, this.adapter.connectNonce, this.adapter.ackNonce?.get(duid));\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} catch (err) {\r\n\t\t\tthis.adapter.log.error(`[buildRoborockMessage] Encrypt failed: ${err}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!encrypted) return false;\r\n\r\n\t\t// Assemble header and payload\r\n\t\tconst s = seq++ >>> 0;\r\n\t\tconst r = random++ >>> 0;\r\n\t\tconst msg = Buffer.alloc(23 + encrypted.length);\r\n\t\tmsg.write(version);\r\n\t\tmsg.writeUInt32BE(s, 3);\r\n\t\tmsg.writeUInt32BE(r, 7);\r\n\t\tmsg.writeUInt32BE(timestamp >>> 0, 11);\r\n\t\tmsg.writeUInt16BE(protocol, 15);\r\n\t\tmsg.writeUInt16BE(encrypted.length, 17);\r\n\t\tencrypted.copy(msg, 19);\r\n\t\tmsg.writeUInt32BE(CRC32.buf(msg.subarray(0, msg.length - 4)) >>> 0, msg.length - 4);\r\n\r\n\t\treturn msg;\r\n\t}\r\n}\r\n"]}