{"version":3,"file":"messageParser.js","sourceRoot":"","sources":["../../src/lib/messageParser.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Roborock } from \"../main\";\nimport { cryptoEngine } from \"./cryptoEngine\";\n\nimport CRC32 from \"crc-32\";\nimport { Parser } from \"binary-parser\";\nimport { z } from \"zod\";\n\n// --------------------\n// Types & Schemas\n// --------------------\n\nexport type ProtocolVersion = \"1.0\" | \"A01\" | \"L01\";\n\nconst SUPPORTED_VERSIONS: ProtocolVersion[] = [\"1.0\", \"A01\", \"L01\"] as const;\n\nconst FrameSchema = z.object({\n\tversion: z.string(),\n\tseq: z.number(),\n\trandom: z.number(),\n\ttimestamp: z.number(),\n\tprotocol: z.number(),\n\tpayloadLen: z.number(),\n\tpayload: z.instanceof(Buffer),\n\tcrc32: z.number(),\n});\n\nexport type Frame = z.infer<typeof FrameSchema> & { version: ProtocolVersion };\n\n// --------------------\n// Constants\n// --------------------\n\nconst HEADER_LEN = 3 + 4 + 4 + 4 + 2 + 2; // version + seq + random + timestamp + protocol + payloadLen\nconst CRC32_LEN = 4; // CRC32 length\n\nlet seq = 1;\nlet random = 4711;\n\n// --------------------\n// Binary Parser\n// --------------------\n\nconst frameParser = new Parser()\n\t.endianess(\"big\")\n\t.string(\"version\", { length: 3 })\n\t.uint32(\"seq\")\n\t.uint32(\"random\")\n\t.uint32(\"timestamp\")\n\t.uint16(\"protocol\")\n\t.uint16(\"payloadLen\")\n\t.buffer(\"payload\", { length: \"payloadLen\" })\n\t.uint32(\"crc32\");\n\n// --------------------\n// CRC Utilities\n// --------------------\n\nfunction validateCrc(buf: Buffer): boolean {\n\tconst crc = CRC32.buf(buf.subarray(0, buf.length - 4)) >>> 0;\n\treturn crc === buf.readUInt32BE(buf.length - 4);\n}\n\nfunction appendCrc(buf: Buffer): void {\n\tconst crc = CRC32.buf(buf.subarray(0, buf.length - 4)) >>> 0;\n\tbuf.writeUInt32BE(crc, buf.length - 4);\n}\n\n// --------------------\n// Dispatch Maps\n// --------------------\n\nconst decryptors: Record<ProtocolVersion, (...args: any[]) => Buffer> = {\n\t\"1.0\": (payload, key, timestamp) => cryptoEngine.decryptV1(payload, key, timestamp),\n\tA01: (payload, key, random) => cryptoEngine.decryptA01(payload, key, random),\n\tL01: (payload, key, timestamp, seq, random, connectNonce, ackNonce) => cryptoEngine.decryptL01(payload, key, timestamp, seq, random, connectNonce, ackNonce),\n};\n\nconst encryptors: Record<ProtocolVersion, (...args: any[]) => Buffer> = {\n\t\"1.0\": (payload, key, timestamp) => cryptoEngine.encryptV1(payload, key, timestamp),\n\tA01: (payload, key, random) => cryptoEngine.encryptA01(payload, key, random),\n\tL01: (payload, key, timestamp, seq, random, connectNonce, ackNonce) => cryptoEngine.encryptL01(payload, key, timestamp, seq, random, connectNonce, ackNonce),\n};\n\n// --------------------\n// Message Parser\n// --------------------\n\nexport class messageParser {\n\tadapter: Roborock;\n\n\tconstructor(adapter: Roborock) {\n\t\tthis.adapter = adapter;\n\t}\n\n\t/**\n\t * Decodes one or more messages from a buffer.\n\t */\n\t_decodeMsg(message: Buffer, duid: string): Frame | Frame[] | null {\n\t\tconst decoded: Frame[] = [];\n\t\tlet offset = 0;\n\n\t\twhile (offset + 3 <= message.length) {\n\t\t\tconst version = message.toString(\"latin1\", offset, offset + 3) as ProtocolVersion;\n\n\t\t\tif (!SUPPORTED_VERSIONS.includes(version)) {\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Unsupported version \"${version}\" at offset ${offset}`);\n\t\t\t\toffset++;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet raw: unknown;\n\t\t\ttry {\n\t\t\t\traw = frameParser.parse(message.subarray(offset));\n\t\t\t} catch (err) {\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Parse failed at offset ${offset}: ${err}`);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tlet data: Frame;\n\t\t\ttry {\n\t\t\t\tdata = FrameSchema.parse(raw) as Frame;\n\t\t\t\tdata.version = version;\n\t\t\t} catch (err) {\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Validation failed: ${err}`);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst msgLen = HEADER_LEN + data.payloadLen + CRC32_LEN;\n\t\t\tif (msgLen <= 0 || offset + msgLen > message.length) break;\n\n\t\t\tconst msgBuffer = message.subarray(offset, offset + msgLen);\n\t\t\tif (!validateCrc(msgBuffer)) {\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] CRC32 mismatch at offset ${offset}`);\n\t\t\t\toffset += msgLen;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst localKey = this.adapter.http_api.getMatchedLocalKeys().get(duid);\n\t\t\tif (!localKey) {\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] No localKey for DUID ${duid}`);\n\t\t\t\toffset += msgLen;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (version === \"L01\") {\n\t\t\t\t\tconst dev = this.adapter.local_api.localDevices[duid];\n\t\t\t\t\tif (!dev?.connectNonce || dev.ackNonce == null) {\n\t\t\t\t\t\tthrow new Error(`[decodeMsg] Missing nonces for L01 (duid=${duid})`);\n\t\t\t\t\t}\n\t\t\t\t\tdata.payload = decryptors.L01(data.payload, localKey, data.timestamp, data.seq, data.random, dev.connectNonce, dev.ackNonce);\n\t\t\t\t} else if (version === \"1.0\") {\n\t\t\t\t\tdata.payload = decryptors[\"1.0\"](data.payload, localKey, data.timestamp);\n\t\t\t\t} else if (version === \"A01\") {\n\t\t\t\t\tdata.payload = decryptors.A01(data.payload, localKey, data.random);\n\t\t\t\t}\n\t\t\t\tdecoded.push(data);\n\t\t\t} catch (err: any) {\n\t\t\t\tthis.adapter.log.error(`[_decodeMsg] Decrypt failed for duid=${duid} at offset ${offset}: ${err}`);\n\t\t\t}\n\n\t\t\toffset += msgLen;\n\t\t}\n\n\t\tif (decoded.length === 0) return null;\n\t\treturn decoded.length === 1 ? decoded[0] : decoded;\n\t}\n\n\t/**\n\t * Builds the JSON payload for the device.\n\t */\n\tasync buildPayload(duid: string, protocol: number, messageID: number, method: string, params: any): Promise<string> {\n\t\tconst timestamp = Math.floor(Date.now() / 1000);\n\t\tconst endpoint = await this.adapter.mqtt_api.ensureEndpoint();\n\t\tconst version = await this.adapter.getDeviceProtocolVersion(duid);\n\n\t\tif (version === \"A01\") {\n\t\t\treturn JSON.stringify({ dps: { [method]: params }, t: timestamp });\n\t\t}\n\n\t\tconst inner: any = { id: messageID, method, params };\n\n\t\tif (method === \"get_photo\") {\n\t\t\tconst kp = cryptoEngine.ensureRsaKeys();\n\t\t\t(params as any).endpoint = endpoint;\n\t\t\t(params as any).security = { cipher_suite: 0, pub_key: kp.public };\n\t\t} else if ([\"get_map_v1\", \"get_clean_record_map\"].includes(method)) {\n\t\t\tinner.security = { endpoint, nonce: this.adapter.nonce.toString(\"hex\").toUpperCase() };\n\t\t}\n\n\t\treturn JSON.stringify({ dps: { [protocol]: JSON.stringify(inner) }, t: timestamp });\n\t}\n\n\t/**\n\t * Builds the final Roborock frame and encrypts the payload.\n\t */\n\tasync buildRoborockMessage(duid: string, protocol: number, timestamp: number, payload: string | Buffer): Promise<Buffer | false> {\n\t\tconst version = (await this.adapter.getDeviceProtocolVersion(duid)) as ProtocolVersion;\n\t\tconst localKey = this.adapter.http_api.getMatchedLocalKeys().get(duid);\n\t\tif (!localKey) return false;\n\n\t\tconst payloadBuf = Buffer.isBuffer(payload) ? payload : Buffer.from(payload, \"utf-8\");\n\t\tlet encrypted: Buffer;\n\n\t\tif (protocol === 1) {\n\t\t\t// hello_request\n\t\t\tencrypted = Buffer.alloc(0);\n\t\t} else if (version === \"L01\") {\n\t\t\tconst connectNonce = this.adapter.local_api.localDevices[duid]?.connectNonce;\n\t\t\tconst ackNonce = this.adapter.local_api.localDevices[duid]?.ackNonce;\n\t\t\tencrypted = encryptors.L01(payloadBuf, localKey, timestamp, seq, random, connectNonce, ackNonce);\n\t\t} else if (version === \"1.0\") {\n\t\t\tencrypted = encryptors[\"1.0\"](payloadBuf, localKey, timestamp);\n\t\t} else if (version === \"A01\") {\n\t\t\tencrypted = encryptors.A01(payloadBuf, localKey, random);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst s = seq++ >>> 0;\n\t\tconst r = random++ >>> 0;\n\t\tconst msg = Buffer.alloc(HEADER_LEN + encrypted.length + CRC32_LEN);\n\n\t\tmsg.write(version);\n\t\tmsg.writeUInt32BE(s, 3);\n\t\tmsg.writeUInt32BE(r, 7);\n\t\tmsg.writeUInt32BE(timestamp >>> 0, 11);\n\t\tmsg.writeUInt16BE(protocol, 15);\n\t\tmsg.writeUInt16BE(encrypted.length, 17);\n\t\tencrypted.copy(msg, 19);\n\n\t\tappendCrc(msg);\n\n\t\treturn msg;\n\t}\n}\n"]}