{"version":3,"file":"local_api.js","sourceRoot":"","sources":["../../src/lib/local_api.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nimport crypto from \"crypto\";\r\nimport { Parser } from \"binary-parser\";\r\nimport ping from \"ping\";\r\nimport net from \"net\";\r\nimport dgram from \"dgram\";\r\nimport crc32 from \"crc-32\";\r\n\r\nconst UDP_DISCOVERY_PORT = 58866;\r\nconst TCP_CONNECTION_PORT = 58867;\r\n\r\nconst BROADCAST_TOKEN = Buffer.from(\"qWKYcdQWrbm9hPqe\", \"utf8\");\r\n\r\nclass EnhancedSocket extends net.Socket {\r\n\tconnected: boolean;\r\n\tchunkBuffer: Buffer;\r\n\r\n\tconstructor(options = {}) {\r\n\t\tsuper(options);\r\n\t\tthis.connected = false;\r\n\t\tthis.chunkBuffer = Buffer.alloc(0);\r\n\r\n\t\tthis.on(\"connect\", () => {\r\n\t\t\tthis.connected = true;\r\n\t\t});\r\n\r\n\t\tthis.on(\"close\", () => {\r\n\t\t\tthis.connected = false;\r\n\t\t});\r\n\r\n\t\tthis.on(\"error\", () => {\r\n\t\t\tthis.connected = false;\r\n\t\t});\r\n\r\n\t\tthis.on(\"end\", () => {\r\n\t\t\tthis.connected = false;\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// Parser for just the version field (first 3 bytes)\r\nconst versionParser = new Parser().string(\"version\", { length: 3 }); // Only parses the protocol version\r\n\r\n// Parser for v1.0 packet fields (excluding version)\r\nconst v1_0_Parser = new Parser()\r\n\t.endianess(\"big\")\r\n\t// Do not parse version here!\r\n\t.uint32(\"seq\")\r\n\t.uint16(\"protocol\")\r\n\t.uint16(\"payloadLen\")\r\n\t.buffer(\"payload\", { length: \"payloadLen\" })\r\n\t.uint32(\"crc32\");\r\n\r\n// Parser for L01 Discovery packet fields (excluding version)\r\nconst vL01_Parser = new Parser()\r\n\t.endianess(\"big\")\r\n\t// Do not parse version here!\r\n\t.buffer(\"field1\", { length: 4 }) // Unknown field at offset 3\r\n\t.buffer(\"field2\", { length: 2 }) // Unknown field at offset 7\r\n\t.uint16(\"payloadLen\")\r\n\t.buffer(\"payload\", { length: \"payloadLen\" })\r\n\t.uint32(\"crc32\");\r\n\r\nexport class local_api {\r\n\tadapter: any;\r\n\tdeviceSockets: Record<string, EnhancedSocket>;\r\n\tcloudDevices: Set<string>;\r\n\tlocalDevices: Record<string, { ip: string; version: string; connectNonce?: number; ackNonce?: number }> = {};\r\n\tlocalDevicesInterval: NodeJS.Timeout | null = null;\r\n\tprivate reconnectPlanned = new Set<string>();\r\n\tprivate connecting = new Set<string>();\r\n\tprivate discoveryServer: dgram.Socket | null = null;\r\n\tprivate discoveryTimer: NodeJS.Timeout | null = null;\r\n\r\n\tconstructor(adapter) {\r\n\t\tthis.adapter = adapter;\r\n\r\n\t\tthis.deviceSockets = {};\r\n\t\tthis.cloudDevices = new Set();\r\n\t\tthis.localDevices = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates a TCP client connection for the given device.\r\n\t *\r\n\t * @async\r\n\t * @param {string} duid - The unique device identifier (DUID).\r\n\t * @returns {Promise<void>} Resolves when the client attempt has finished.\r\n\t */\r\n\tasync initiateClient(duid: string): Promise<void> {\r\n\t\tif (this.connecting.has(duid)) return;\r\n\t\tthis.connecting.add(duid);\r\n\r\n\t\ttry {\r\n\t\t\tconst ip = this.getIpForDuid(duid);\r\n\t\t\tif (!ip) {\r\n\t\t\t\tthis.adapter.log.debug(`No local IP for ${duid} → MQTT`);\r\n\t\t\t\tthis.cloudDevices.add(duid);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Already connected?\r\n\t\t\tconst existing = this.deviceSockets?.[duid];\r\n\t\t\tif (existing?.connected) {\r\n\t\t\t\tthis.adapter.log.debug(`Already connected via TCP: ${duid}`);\r\n\t\t\t\tthis.cloudDevices.delete(duid);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Try TCP connect\r\n\t\t\tconst client = new EnhancedSocket();\r\n\r\n\t\t\tawait new Promise<void>((resolve, reject) => {\r\n\t\t\t\tconst onErrorOnce = (err: Error) => reject(err);\r\n\t\t\t\tclient.once(\"error\", onErrorOnce); // only for the connect phase\r\n\r\n\t\t\t\tclient.setTimeout(5000, () => {\r\n\t\t\t\t\tclient.destroy();\r\n\t\t\t\t\treject(new Error(\"TCP connect timeout\"));\r\n\t\t\t\t});\r\n\r\n\t\t\t\tclient.connect(TCP_CONNECTION_PORT, ip, () => {\r\n\t\t\t\t\tclient.off(\"error\", onErrorOnce); // Remove listener\r\n\t\t\t\t\tclient.setTimeout(0);\r\n\t\t\t\t\tthis.adapter.log.info(`TCP client for ${duid} connected`);\r\n\t\t\t\t\tthis.deviceSockets[duid] = client;\r\n\t\t\t\t\tthis.reconnectPlanned.delete(duid);\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\tclient.on(\"data\", async (message) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif (client.chunkBuffer.length == 0) {\r\n\t\t\t\t\t\tif (!this.checkComplete(message)) {\r\n\t\t\t\t\t\t\tthis.adapter.log.debug(`New chunk buffer created`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tclient.chunkBuffer = message;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.adapter.log.debug(`New chunk buffer data received`);\r\n\t\t\t\t\t\tclient.chunkBuffer = Buffer.concat([client.chunkBuffer, message]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// this.adapter.log.debug(`new chunk received: ${message.toString(\"hex\")}`);\r\n\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tif (this.checkComplete(client.chunkBuffer)) {\r\n\t\t\t\t\t\tif (client.chunkBuffer.length != message.length) {\r\n\t\t\t\t\t\t\tthis.adapter.log.debug(`Chunk buffer data is complete. Processing...`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// this.adapter.log.debug(`chunkBuffer: ${client.chunkBuffer.toString(\"hex\")}`);\r\n\t\t\t\t\t\twhile (offset + 4 <= client.chunkBuffer.length) {\r\n\t\t\t\t\t\t\tconst segmentLength = client.chunkBuffer.readUInt32BE(offset);\r\n\t\t\t\t\t\t\t// length of 17 does not contain any useful data.\r\n\t\t\t\t\t\t\t// The parser for this looks like this: const shortMessageParser = new Parser().endianess(\"big\").string(\"version\", {length: 3,}).uint32(\"seq\").uint32(\"random\").uint32(\"timestamp\").uint16(\"protocol\")\r\n\t\t\t\t\t\t\tif (segmentLength != 17) {\r\n\t\t\t\t\t\t\t\tconst currentBuffer = client.chunkBuffer.subarray(offset + 4, offset + segmentLength + 4);\r\n\t\t\t\t\t\t\t\tconst dataArr = this.adapter.requestsHandler.messageParser._decodeMsg(currentBuffer, duid);\r\n\r\n\t\t\t\t\t\t\t\tconst allMessages = Array.isArray(dataArr) ? dataArr : dataArr ? [dataArr] : [];\r\n\t\t\t\t\t\t\t\tfor (const data of allMessages) {\r\n\t\t\t\t\t\t\t\t\tswitch (data.protocol) {\r\n\t\t\t\t\t\t\t\t\t\tcase 2: // hello_response\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst ackNonce = data.header?.nonce;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (ackNonce !== undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.localDevices[duid].ackNonce = ackNonce;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.adapter.log.debug(`initL01: hello_response received from ${duid}, ackNonce=${ackNonce}`);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase 4: {\r\n\t\t\t\t\t\t\t\t\t\t\tconst dps = JSON.parse(data.payload).dps;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tif (dps) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst _102 = JSON.stringify(dps[\"102\"]);\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst parsed_102 = JSON.parse(JSON.parse(_102));\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst id = parsed_102.id;\r\n\t\t\t\t\t\t\t\t\t\t\t\tconst result = parsed_102.result;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.adapter.requestsHandler.resolvePendingRequest(id, result, data.protocol);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\toffset += 4 + segmentLength;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tthis.clearChunkBuffer(duid);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tthis.adapter.catchError(`Failed to create tcp client: ${error.stack}`, `function initiateClient`, duid);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tclient.on(\"close\", () => this.scheduleReconnect(duid, `connection closed`));\r\n\t\t\tclient.on(\"error\", (error) => this.scheduleReconnect(duid, `connection error: ${error.message}`));\r\n\t\t\tclient.on(\"end\", () => this.scheduleReconnect(duid, \"connection ended\"));\r\n\r\n\t\t\tthis.adapter.log.info(`TCP client established for ${duid}`);\r\n\t\t\tthis.cloudDevices.delete(duid);\r\n\t\t} catch (err: any) {\r\n\t\t\tthis.adapter.log.warn(`TCP connect failed for ${duid}: ${err?.message || err}`);\r\n\t\t\tthis.scheduleReconnect(duid, \"connect failed\");\r\n\t\t\tthis.cloudDevices.add(duid);\r\n\t\t} finally {\r\n\t\t\tthis.connecting.delete(duid);\r\n\t\t}\r\n\t}\r\n\r\n\tscheduleReconnect(duid: string, reason: string) {\r\n\t\tthis.adapter.log.warn(`TCP ${reason} for ${duid}, retry in 5s`);\r\n\r\n\t\tconst old = this.deviceSockets[duid];\r\n\t\tif (old) {\r\n\t\t\ttry {\r\n\t\t\t\told.removeAllListeners();\r\n\t\t\t} catch {}\r\n\t\t\ttry {\r\n\t\t\t\told.destroy();\r\n\t\t\t} catch {}\r\n\t\t\tdelete this.deviceSockets[duid];\r\n\t\t}\r\n\r\n\t\tif (this.reconnectPlanned.has(duid)) return;\r\n\t\tthis.reconnectPlanned.add(duid);\r\n\r\n\t\tconst t = this.adapter.setTimeout(() => {\r\n\t\t\tthis.reconnectPlanned.delete(duid);\r\n\r\n\t\t\t// retry only if duid is still local\r\n\t\t\tif (this.getIpForDuid(duid)) {\r\n\t\t\t\tthis.initiateClient(duid).catch((e) => this.adapter.log.warn(`Reconnect attempt failed for ${duid}: ${e?.message || e}`));\r\n\t\t\t} else {\r\n\t\t\t\tthis.adapter.log.debug(`Skip reconnect for ${duid}, no longer in localDevices. Trying again next time.`);\r\n\t\t\t\tthis.scheduleReconnect(duid, \"waiting for IP\");\r\n\t\t\t}\r\n\t\t}, 5000);\r\n\t}\r\n\r\n\tasync isLocallyReachable(ip: string): Promise<boolean> {\r\n\t\tconst res = await ping.promise.probe(ip, { timeout: 2 });\r\n\t\treturn res.alive;\r\n\t}\r\n\r\n\tcheckComplete(buffer) {\r\n\t\tlet totalLength = 0;\r\n\t\tlet offset = 0;\r\n\r\n\t\twhile (offset + 4 <= buffer.length) {\r\n\t\t\tconst segmentLength = buffer.readUInt32BE(offset);\r\n\t\t\ttotalLength += 4 + segmentLength;\r\n\t\t\toffset += 4 + segmentLength;\r\n\r\n\t\t\tif (offset > buffer.length) {\r\n\t\t\t\treturn false; // Data is not complete yet\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn totalLength <= buffer.length;\r\n\t}\r\n\r\n\tclearChunkBuffer(duid) {\r\n\t\tif (this.deviceSockets[duid]) {\r\n\t\t\tthis.deviceSockets[duid].chunkBuffer = Buffer.alloc(0);\r\n\t\t}\r\n\t}\r\n\r\n\tsendMessage(duid, message) {\r\n\t\tconst client = this.deviceSockets[duid];\r\n\t\tif (client?.connected) {\r\n\t\t\tclient.write(message);\r\n\t\t}\r\n\t}\r\n\r\n\tisConnected(duid) {\r\n\t\tif (this.deviceSockets[duid]) {\r\n\t\t\treturn this.deviceSockets[duid].connected;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tasync startUdpDiscovery(timeoutMs = 10_000): Promise<void> {\r\n\t\tif (this.discoveryServer) {\r\n\t\t\tthis.adapter.log.warn(\"UDP discovery already running\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.adapter.log.debug(\"UDP Discovery started\");\r\n\t\tconst devices: Record<string, { ip: string; version: string; connectNonce?: number }> = {};\r\n\r\n\t\tconst firstOpts: dgram.SocketOptions = process.platform === \"win32\" ? { type: \"udp4\", reuseAddr: true } : { type: \"udp4\", reusePort: true };\r\n\r\n\t\tthis.discoveryServer = dgram.createSocket(firstOpts);\r\n\r\n\t\tthis.discoveryServer.on(\"message\", async (msg, rinfo) => {\r\n\t\t\tthis.adapter.log.debug(`UDP message received: ${msg.toString(\"hex\")}`);\r\n\t\t\tlet decodedMessage;\r\n\t\t\tlet parsedMessage;\r\n\r\n\t\t\tconst version = versionParser.parse(msg).version;\r\n\t\t\tswitch (version) {\r\n\t\t\t\tcase \"L01\":\r\n\t\t\t\t\tparsedMessage = vL01_Parser.parse(msg.slice(3));\r\n\t\t\t\t\tdecodedMessage = this.decryptGCM(msg.toString(\"hex\"));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"1.0\":\r\n\t\t\t\t\tparsedMessage = v1_0_Parser.parse(msg.slice(3));\r\n\t\t\t\t\tdecodedMessage = this.decryptECB(parsedMessage.payload);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.adapter.log.warn(`Unknown protocol version \"${version}\" found in local discovery packet. Raw: ${msg.toString(\"hex\")}`);\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst parsedDecodedMessage = JSON.parse(decodedMessage);\r\n\t\t\t\tif (!parsedDecodedMessage) return;\r\n\r\n\t\t\t\tconst duid = parsedDecodedMessage.duid;\r\n\t\t\t\tconst ip = parsedDecodedMessage.ip;\r\n\t\t\t\tconst localKeys = this.adapter.http_api.getMatchedLocalKeys();\r\n\t\t\t\tconst localKey = localKeys.get(duid);\r\n\r\n\t\t\t\tif (!localKey) return;\r\n\r\n\t\t\t\tif (!devices[duid]) {\r\n\t\t\t\t\tdevices[duid] = { ip, version };\r\n\t\t\t\t\tthis.adapter.log.debug(`Added local device: ${duid} @ ${ip} using version ${version}`);\r\n\r\n\t\t\t\t\tif (version === \"L01\") {\r\n\t\t\t\t\t\tconst connectNonce = Math.floor(Math.random() * 1e9);\r\n\t\t\t\t\t\tdevices[duid].connectNonce = connectNonce;\r\n\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tawait this.sendHello(duid, connectNonce);\r\n\t\t\t\t\t\t\tthis.adapter.log.debug(`Hello sent to ${duid} with connectNonce=${connectNonce}`);\r\n\t\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\t\tthis.adapter.log.warn(`Failed to send Hello: ${err}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthis.adapter.log.warn(`Failed to process message: ${error.stack}`);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.discoveryServer.on(\"listening\", () => {\r\n\t\t\tconst addr = this.discoveryServer!.address();\r\n\t\t\tthis.adapter.log.info(`UDP listening on ${addr.address}:${addr.port}`);\r\n\t\t});\r\n\r\n\t\tthis.discoveryServer.on(\"error\", (error) => this.adapter.catchError(`Server error: ${error.stack}`));\r\n\r\n\t\tthis.discoveryServer.bind(UDP_DISCOVERY_PORT);\r\n\r\n\t\tawait new Promise<void>((resolve) => {\r\n\t\t\tthis.discoveryTimer = setTimeout(() => {\r\n\t\t\t\tthis.stopUdpDiscovery();\r\n\t\t\t\tthis.adapter.log.info(`UDP discovery finished after ${timeoutMs / 1000}s`);\r\n\t\t\t\tthis.localDevices = { ...devices };\r\n\t\t\t\tresolve();\r\n\t\t\t}, timeoutMs);\r\n\t\t});\r\n\t}\r\n\r\n\tstopUdpDiscovery(): void {\r\n\t\tif (this.discoveryTimer) {\r\n\t\t\tclearTimeout(this.discoveryTimer);\r\n\t\t\tthis.discoveryTimer = null;\r\n\t\t}\r\n\t\tif (this.discoveryServer) {\r\n\t\t\tthis.discoveryServer.removeAllListeners();\r\n\t\t\tthis.discoveryServer.close();\r\n\t\t\tthis.discoveryServer = null;\r\n\t\t\tthis.adapter.log.info(\"UDP discovery stopped\");\r\n\t\t}\r\n\t}\r\n\r\n\tasync initL01(duid: string): Promise<void> {\r\n\t\tconst dev = this.localDevices[duid];\r\n\t\tif (!dev) {\r\n\t\t\tthis.adapter.log.warn(`initL01: no local device found for ${duid}`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst connectNonce = Math.floor(Math.random() * 1e9);\r\n\t\t\tdev.connectNonce = connectNonce;\r\n\r\n\t\t\tthis.sendHello(duid, connectNonce);\r\n\r\n\t\t} catch (err: any) {\r\n\t\t\tthis.adapter.log.warn(`initL01 failed for ${duid}: ${err.message || err}`);\r\n\t\t}\r\n\t}\r\n\r\n\tasync sendHello(duid: string, connectNonce: number) {\r\n\t\tconst client = this.deviceSockets[duid];\r\n\t\tif (!client?.connected) throw new Error(\"TCP not connected\");\r\n\r\n\t\tconst timestamp = Math.floor(Date.now() / 1000);\r\n\t\tconst protocol = 1;\r\n\t\tconst payload = Buffer.alloc(0);\r\n\r\n\t\tconst msg = await this.adapter.requestsHandler.messageParser.buildRoborockMessage(duid, protocol, timestamp, payload, connectNonce);\r\n\t\tif (!msg) throw new Error(\"Failed to build hello message\");\r\n\r\n\t\tclient.write(msg);\r\n\r\n\t\tthis.adapter.log.debug(`Hello (TCP) sent to ${duid} with connectNonce=${connectNonce}`);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} duid\r\n\t */\r\n\tisLocalDevice(duid) {\r\n\t\tif (duid in this.deviceSockets) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tgetIpForDuid(duid) {\r\n\t\tconst isSharedDevice = this.adapter.http_api.isSharedDevice(duid);\r\n\t\tif (isSharedDevice) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn this.localDevices?.[duid].ip || null;\r\n\t}\r\n\r\n\tgetLocalProtocolVersion(duid) {\r\n\t\treturn this.localDevices?.[duid].version || null;\r\n\t}\r\n\r\n\tdecryptECB(encrypted) {\r\n\t\tconst input = Buffer.isBuffer(encrypted) ? encrypted : Buffer.from(encrypted, \"binary\");\r\n\t\tconst decipher = crypto.createDecipheriv(\"aes-128-ecb\", BROADCAST_TOKEN, null);\r\n\t\tdecipher.setAutoPadding(false);\r\n\t\ttry {\r\n\t\t\tlet decrypted = decipher.update(encrypted, \"binary\", \"utf8\");\r\n\t\t\tdecrypted += decipher.final(\"utf8\");\r\n\t\t\treturn this.removePadding(decrypted);\r\n\t\t} catch (e) {\r\n\t\t\tthis.adapter.log.error(`[decryptECB] Failed to decrypt! Error: ${e.message} encrypted (hex): ${input.toString(\"hex\")} length: ${input.length}}`);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\r\n\tdecryptGCM(hexPacket) {\r\n\t\tconst packet = Buffer.from(hexPacket, \"hex\");\r\n\r\n\t\tif (packet.length < 15) {\r\n\t\t\tconsole.error(\"Payload too small\");\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// CRC32 check\r\n\t\tconst crcFromPacket = packet.readUInt32BE(packet.length - 4);\r\n\t\tconst packetWithoutCrc = packet.subarray(0, packet.length - 4);\r\n\t\tif (crc32.buf(packetWithoutCrc) >>> 0 !== crcFromPacket) {\r\n\t\t\tconsole.error(\"CRC validation failed\");\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst payloadLength = packet.readUInt16BE(9);\r\n\t\tconst payload = packet.subarray(11, 11 + payloadLength);\r\n\t\tconst key = crypto.createHash(\"sha256\").update(BROADCAST_TOKEN).digest();\r\n\t\tconst digestInput = packet.subarray(0, 9);\r\n\t\tconst digest = crypto.createHash(\"sha256\").update(digestInput).digest();\r\n\t\tconst iv = digest.subarray(0, 12);\r\n\t\tconst tag = payload.subarray(payload.length - 16);\r\n\t\tconst ciphertext = payload.subarray(0, payload.length - 16);\r\n\t\tconst decipher = crypto.createDecipheriv(\"aes-256-gcm\", key, iv);\r\n\r\n\t\tdecipher.setAuthTag(tag);\r\n\r\n\t\ttry {\r\n\t\t\tconst decrypted = Buffer.concat([decipher.update(ciphertext), decipher.final()]);\r\n\t\t\treturn decrypted.toString(\"utf8\");\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`[decryptGCM] Failed to decrypt! Error: ${e.message} IV: ${iv.toString(\"hex\")} Tag: ${tag.toString(\"hex\")} Encrypted (hex): ${ciphertext.toString(\r\n\t\t\t\t\t\"hex\"\r\n\t\t\t\t)} Length: ${ciphertext.length}`\r\n\t\t\t);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tremovePadding(str) {\r\n\t\tconst paddingLength = str.charCodeAt(str.length - 1);\r\n\t\treturn str.slice(0, -paddingLength);\r\n\t}\r\n\r\n\tclearLocalDevicedTimeout() {\r\n\t\tif (this.localDevicesInterval) {\r\n\t\t\tthis.adapter.clearTimeout(this.localDevicesInterval);\r\n\t\t\tthis.localDevicesInterval = null;\r\n\t\t}\r\n\t}\r\n}\r\n"]}