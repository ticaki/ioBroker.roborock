{"version":3,"file":"local_api.js","sourceRoot":"","sources":["../../src/lib/local_api.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nimport crypto from \"crypto\";\r\nimport { Parser } from \"binary-parser\";\r\nimport ping from \"ping\";\r\nimport net from \"net\";\r\nimport dgram from \"dgram\";\r\nimport crc32 from \"crc-32\";\r\n\r\nconst UDP_DISCOVERY_PORT = 58866;\r\nconst TCP_CONNECTION_PORT = 58867;\r\nconst TIMEOUT = 5000; // 5 seconds timeout\r\n\r\nconst BROADCAST_TOKEN = Buffer.from(\"qWKYcdQWrbm9hPqe\", \"utf8\");\r\n\r\nclass EnhancedSocket extends net.Socket {\r\n\tconnected: boolean;\r\n\tchunkBuffer: Buffer;\r\n\r\n\tconstructor(options = {}) {\r\n\t\tsuper(options);\r\n\t\tthis.connected = false;\r\n\t\tthis.chunkBuffer = Buffer.alloc(0);\r\n\r\n\t\tthis.on(\"connect\", () => {\r\n\t\t\tthis.connected = true;\r\n\t\t});\r\n\r\n\t\tthis.on(\"close\", () => {\r\n\t\t\tthis.connected = false;\r\n\t\t});\r\n\r\n\t\tthis.on(\"error\", () => {\r\n\t\t\tthis.connected = false;\r\n\t\t});\r\n\r\n\t\tthis.on(\"end\", () => {\r\n\t\t\tthis.connected = false;\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// Parser for just the version field (first 3 bytes)\r\nconst versionParser = new Parser().string(\"version\", { length: 3 }); // Only parses the protocol version\r\n\r\n// Parser for v1.0 packet fields (excluding version)\r\nconst v1_0_Parser = new Parser()\r\n\t.endianess(\"big\")\r\n\t// Do not parse version here!\r\n\t.uint32(\"seq\")\r\n\t.uint16(\"protocol\")\r\n\t.uint16(\"payloadLen\")\r\n\t.buffer(\"payload\", { length: \"payloadLen\" })\r\n\t.uint32(\"crc32\");\r\n\r\n// Parser for L01 Discovery packet fields (excluding version)\r\nconst vL01_Parser = new Parser()\r\n\t.endianess(\"big\")\r\n\t// Do not parse version here!\r\n\t.buffer(\"field1\", { length: 4 }) // Unknown field at offset 3\r\n\t.buffer(\"field2\", { length: 2 }) // Unknown field at offset 7\r\n\t.uint16(\"payloadLen\")\r\n\t.buffer(\"payload\", { length: \"payloadLen\" })\r\n\t.uint32(\"crc32\");\r\n\r\nexport class local_api {\r\n\tadapter: any;\r\n\tserver: dgram.Socket;\r\n\tlocalDevices: Record<string, EnhancedSocket>;\r\n\tcloudDevices: Set<string>;\r\n\tlocalIps: Set<string>;\r\n\tlocalDevicesTimeout: NodeJS.Timeout | null = null;\r\n\r\n\tconstructor(adapter) {\r\n\t\tthis.adapter = adapter;\r\n\t\tthis.server = dgram.createSocket(\"udp4\");\r\n\r\n\t\ttry {\r\n\t\t\tthis.server.bind(UDP_DISCOVERY_PORT);\r\n\t\t} catch (err) {\r\n\t\t\tadapter.catchError(`Failed to bind server to port ${UDP_DISCOVERY_PORT}: ${err.message}`);\r\n\t\t}\r\n\r\n\t\tthis.localDevices = {};\r\n\t\tthis.cloudDevices = new Set();\r\n\t\tthis.localIps = new Set();\r\n\t}\r\n\r\n\t/**\r\n\t * Initiates a TCP client connection for the given device.\r\n\t *\r\n\t * @async\r\n\t * @param {string} duid - The unique device identifier (DUID).\r\n\t * @returns {Promise<void>} Resolves when the client attempt has finished.\r\n\t */\r\n\tasync initiateClient(duid: string): Promise<void> {\r\n\t\t// 1) Resolve IP\r\n\t\tconst ip = this.getIpForDuid(duid); // must return string or null\r\n\t\tif (!ip) {\r\n\t\t\tthis.adapter.log.warn(`No IP for ${duid}; switching to MQTT`);\r\n\t\t\tthis.cloudDevices.add(duid);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 2) Already connected? Do nothing.\r\n\t\tconst existing = this.localDevices?.[duid];\r\n\t\tif (existing?.connected) {\r\n\t\t\tthis.adapter.log.debug(`TCP already connected for ${duid}`);\r\n\t\t\tthis.cloudDevices.delete(duid);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 3) Quick reachability check (ping)\r\n\t\tconst reachable = await this.isLocallyReachable(ip);\r\n\t\tthis.adapter.log.debug(`Reachable (ICMP) ${duid} @ ${ip}: ${reachable}`);\r\n\t\tif (!reachable) {\r\n\t\t\tthis.adapter.log.info(`Host not reachable for ${duid}; using MQTT`);\r\n\t\t\tthis.cloudDevices.add(duid);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// 4) Connect\r\n\t\ttry {\r\n\t\t\tawait this.createClient(duid, ip);\r\n\t\t\tthis.adapter.log.info(`TCP client established for ${duid}`);\r\n\t\t\tthis.cloudDevices.delete(duid);\r\n\t\t} catch (err: any) {\r\n\t\t\tthis.adapter.log.warn(`TCP connect failed for ${duid}: ${err?.message || err}; using MQTT`);\r\n\t\t\tthis.cloudDevices.add(duid);\r\n\t\t}\r\n\t}\r\n\r\n\tasync createClient(duid, ip) {\r\n\t\tconst client = new EnhancedSocket();\r\n\r\n\t\ttry {\r\n\t\t\tawait new Promise<void>((resolve, reject) => {\r\n\t\t\t\tclient\r\n\t\t\t\t\t.connect(TCP_CONNECTION_PORT, ip, () => {\r\n\t\t\t\t\t\tthis.adapter.log.info(`TCP client for ${duid} connected`);\r\n\t\t\t\t\t\tthis.localDevices[duid] = client;\r\n\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.on(\"error\", (error) => {\r\n\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tthis.adapter.log.warn(`TCP connect error for ${duid}: ${error.message}`);\r\n\t\t\tdelete this.localDevices[duid];\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tclient.on(\"data\", async (message) => {\r\n\t\t\ttry {\r\n\t\t\t\tif (client.chunkBuffer.length == 0) {\r\n\t\t\t\t\tif (!this.checkComplete(message)) {\r\n\t\t\t\t\t\tthis.adapter.log.debug(`New chunk buffer created`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tclient.chunkBuffer = message;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.adapter.log.debug(`New chunk buffer data received`);\r\n\t\t\t\t\tclient.chunkBuffer = Buffer.concat([client.chunkBuffer, message]);\r\n\t\t\t\t}\r\n\t\t\t\t// this.adapter.log.debug(`new chunk received: ${message.toString(\"hex\")}`);\r\n\r\n\t\t\t\tlet offset = 0;\r\n\t\t\t\tif (this.checkComplete(client.chunkBuffer)) {\r\n\t\t\t\t\tif (client.chunkBuffer.length != message.length) {\r\n\t\t\t\t\t\tthis.adapter.log.debug(`Chunk buffer data is complete. Processing...`);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// this.adapter.log.debug(`chunkBuffer: ${client.chunkBuffer.toString(\"hex\")}`);\r\n\t\t\t\t\twhile (offset + 4 <= client.chunkBuffer.length) {\r\n\t\t\t\t\t\tconst segmentLength = client.chunkBuffer.readUInt32BE(offset);\r\n\t\t\t\t\t\t// length of 17 does not contain any useful data.\r\n\t\t\t\t\t\t// The parser for this looks like this: const shortMessageParser = new Parser().endianess(\"big\").string(\"version\", {length: 3,}).uint32(\"seq\").uint32(\"random\").uint32(\"timestamp\").uint16(\"protocol\")\r\n\t\t\t\t\t\tif (segmentLength != 17) {\r\n\t\t\t\t\t\t\tconst currentBuffer = client.chunkBuffer.subarray(offset + 4, offset + segmentLength + 4);\r\n\t\t\t\t\t\t\tconst dataArr = this.adapter.requests_handler.message_parser._decodeMsg(currentBuffer, duid);\r\n\r\n\t\t\t\t\t\t\tconst allMessages = Array.isArray(dataArr) ? dataArr : dataArr ? [dataArr] : [];\r\n\t\t\t\t\t\t\tfor (const data of allMessages) {\r\n\t\t\t\t\t\t\t\tif (data.protocol == 4) {\r\n\t\t\t\t\t\t\t\t\tconst dps = JSON.parse(data.payload).dps;\r\n\r\n\t\t\t\t\t\t\t\t\tif (dps) {\r\n\t\t\t\t\t\t\t\t\t\tconst _102 = JSON.stringify(dps[\"102\"]);\r\n\t\t\t\t\t\t\t\t\t\tconst parsed_102 = JSON.parse(JSON.parse(_102));\r\n\t\t\t\t\t\t\t\t\t\tconst id = parsed_102.id;\r\n\t\t\t\t\t\t\t\t\t\tconst result = parsed_102.result;\r\n\r\n\t\t\t\t\t\t\t\t\t\tthis.adapter.requests_handler.resolvePendingRequest(id, result, data.protocol);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\toffset += 4 + segmentLength;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.clearChunkBuffer(duid);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthis.adapter.catchError(`Failed to create tcp client: ${error.stack}`, `function createClient`, duid);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tclient.on(\"close\", () => {\r\n\t\t\tdelete this.localDevices[duid];\r\n\t\t});\r\n\r\n\t\tclient.on(\"error\", (error) => {\r\n\t\t\tthis.adapter.log.info(`TCP error for ${duid}: ${error.message}`);\r\n\t\t});\r\n\t}\r\n\r\n\tasync isLocallyReachable(ip: string): Promise<boolean> {\r\n\t\tconst res = await ping.promise.probe(ip, { timeout: 2 });\r\n\t\treturn res.alive;\r\n\t}\r\n\r\n\tcheckComplete(buffer) {\r\n\t\tlet totalLength = 0;\r\n\t\tlet offset = 0;\r\n\r\n\t\twhile (offset + 4 <= buffer.length) {\r\n\t\t\tconst segmentLength = buffer.readUInt32BE(offset);\r\n\t\t\ttotalLength += 4 + segmentLength;\r\n\t\t\toffset += 4 + segmentLength;\r\n\r\n\t\t\tif (offset > buffer.length) {\r\n\t\t\t\treturn false; // Data is not complete yet\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn totalLength <= buffer.length;\r\n\t}\r\n\r\n\tclearChunkBuffer(duid) {\r\n\t\tif (this.localDevices[duid]) {\r\n\t\t\tthis.localDevices[duid].chunkBuffer = Buffer.alloc(0);\r\n\t\t}\r\n\t}\r\n\r\n\tsendMessage(duid, message) {\r\n\t\tconst client = this.localDevices[duid];\r\n\t\tif (client) {\r\n\t\t\tclient.write(message);\r\n\t\t}\r\n\t}\r\n\r\n\tisConnected(duid) {\r\n\t\tif (this.localDevices[duid]) {\r\n\t\t\treturn this.localDevices[duid].connected;\r\n\t\t}\r\n\t}\r\n\r\n\tasync getLocalDevices() {\r\n\t\tthis.adapter.log.debug(`getLocalDevices() called`);\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst devices = {}; // Temporary list to store discovered devices\r\n\r\n\t\t\t// Handler to process incoming messages\r\n\t\t\tconst handleMessage = async (msg) => {\r\n\t\t\t\tconst version = versionParser.parse(msg).version;\r\n\r\n\t\t\t\tthis.adapter.log.debug(`getLocalDevices() packet with version ${version} received: ${msg.toString(\"hex\")}`);\r\n\r\n\t\t\t\tlet decodedMessage;\r\n\t\t\t\tlet parsedMessage;\r\n\r\n\t\t\t\t// Dynamically select the parser based on version\r\n\t\t\t\tswitch (version) {\r\n\t\t\t\t\tcase \"L01\":\r\n\t\t\t\t\t\tparsedMessage = vL01_Parser.parse(msg.slice(3));\r\n\t\t\t\t\t\tdecodedMessage = this.decryptGCM(msg.toString(\"hex\"));\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"1.0\":\r\n\t\t\t\t\t\tparsedMessage = v1_0_Parser.parse(msg.slice(3));\r\n\t\t\t\t\t\tdecodedMessage = this.decryptECB(parsedMessage.payload);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthis.adapter.log.warn(`Unknown protocol version \"${version}\" found in local discovery packet. Please report this! Raw: ${msg.toString(\"hex\")}`);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Decrypt the payload (if needed)\r\n\t\t\t\t\tconst parsedDecodedMessage = JSON.parse(decodedMessage);\r\n\r\n\t\t\t\t\tthis.adapter.log.debug(`getLocalDevices() message received: ${JSON.stringify(parsedDecodedMessage)}`);\r\n\r\n\t\t\t\t\tif (parsedDecodedMessage) {\r\n\t\t\t\t\t\tconst localKeys = this.adapter.http_api.getMatchedLocalKeys();\r\n\t\t\t\t\t\tconst localKey = localKeys.get(parsedDecodedMessage.duid);\r\n\r\n\t\t\t\t\t\tif (localKey && !devices[parsedDecodedMessage.duid]) {\r\n\t\t\t\t\t\t\tdevices[parsedDecodedMessage.duid] = parsedDecodedMessage.ip;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tthis.adapter.log.warn(`Failed to process message: ${error.stack}`);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// Handler to process server errors\r\n\t\t\tconst handleError = (error) => {\r\n\t\t\t\tthis.adapter.catchError(`Server error: ${error.stack}`);\r\n\t\t\t\tcleanup(); // Clean up on error\r\n\t\t\t\treject(error);\r\n\t\t\t};\r\n\r\n\t\t\t// Cleanup function to remove temporary handlers and clear the timeout\r\n\t\t\tconst cleanup = () => {\r\n\t\t\t\tthis.server.off(\"message\", handleMessage);\r\n\t\t\t\tthis.server.off(\"error\", handleError);\r\n\t\t\t\tif (this.localDevicesTimeout) {\r\n\t\t\t\t\tthis.adapter.clearTimeout(this.localDevicesTimeout);\r\n\t\t\t\t\tthis.localDevicesTimeout = null;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\t// Add temporary event handlers\r\n\t\t\tthis.server.on(\"message\", handleMessage);\r\n\t\t\tthis.server.on(\"error\", handleError);\r\n\r\n\t\t\t// Set a timeout for discovering devices\r\n\t\t\tthis.localDevicesTimeout = this.adapter.setTimeout(() => {\r\n\t\t\t\tcleanup(); // Remove handlers and clear timeout after timeout\r\n\t\t\t\tresolve(devices); // Return the discovered devices\r\n\t\t\t}, TIMEOUT);\r\n\t\t});\r\n\t}\r\n\r\n\tasync updateTcpIps() {\r\n\t\tconst tcpDevices = (await this.getLocalDevices()) as Record<string, any>; // UDP discovery\r\n\t\tthis.adapter.log.debug(`updateTcpIps() called, found devices: ${JSON.stringify(tcpDevices)}`);\r\n\t\tthis.localIps = { ...this.localIps, ...tcpDevices };\r\n\t\tthis.adapter.log.debug(`local IPs: ${JSON.stringify(this.localIps)}`);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} duid\r\n\t */\r\n\tisLocalDevice(duid) {\r\n\t\tif (duid in this.localDevices) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tgetIpForDuid(duid) {\r\n\t\treturn this.localIps?.[duid] || null;\r\n\t}\r\n\r\n\tdecryptECB(encrypted) {\r\n\t\tconst input = Buffer.isBuffer(encrypted) ? encrypted : Buffer.from(encrypted, \"binary\");\r\n\t\tconst decipher = crypto.createDecipheriv(\"aes-128-ecb\", BROADCAST_TOKEN, null);\r\n\t\tdecipher.setAutoPadding(false);\r\n\t\ttry {\r\n\t\t\tlet decrypted = decipher.update(encrypted, \"binary\", \"utf8\");\r\n\t\t\tdecrypted += decipher.final(\"utf8\");\r\n\t\t\treturn this.removePadding(decrypted);\r\n\t\t} catch (e) {\r\n\t\t\tthis.adapter.log.error(`[decryptECB] Failed to decrypt! Error: ${e.message} encrypted (hex): ${input.toString(\"hex\")} length: ${input.length}}`);\r\n\t\t\tthrow e;\r\n\t\t}\r\n\t}\r\n\r\n\tdecryptGCM(hexPacket) {\r\n\t\tconst packet = Buffer.from(hexPacket, \"hex\");\r\n\r\n\t\tif (packet.length < 15) {\r\n\t\t\tconsole.error(\"Payload too small\");\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// CRC32 check\r\n\t\tconst crcFromPacket = packet.readUInt32BE(packet.length - 4);\r\n\t\tconst packetWithoutCrc = packet.subarray(0, packet.length - 4);\r\n\t\tif (crc32.buf(packetWithoutCrc) >>> 0 !== crcFromPacket) {\r\n\t\t\tconsole.error(\"CRC validation failed\");\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tconst payloadLength = packet.readUInt16BE(9);\r\n\t\tconst payload = packet.subarray(11, 11 + payloadLength);\r\n\t\tconst key = crypto.createHash(\"sha256\").update(BROADCAST_TOKEN).digest();\r\n\t\tconst digestInput = packet.subarray(0, 9);\r\n\t\tconst digest = crypto.createHash(\"sha256\").update(digestInput).digest();\r\n\t\tconst iv = digest.subarray(0, 12);\r\n\t\tconst tag = payload.subarray(payload.length - 16);\r\n\t\tconst ciphertext = payload.subarray(0, payload.length - 16);\r\n\t\tconst decipher = crypto.createDecipheriv(\"aes-256-gcm\", key, iv);\r\n\r\n\t\tdecipher.setAuthTag(tag);\r\n\r\n\t\ttry {\r\n\t\t\tconst decrypted = Buffer.concat([decipher.update(ciphertext), decipher.final()]);\r\n\t\t\treturn decrypted.toString(\"utf8\");\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(\r\n\t\t\t\t`[decryptGCM] Failed to decrypt! Error: ${e.message} IV: ${iv.toString(\"hex\")} Tag: ${tag.toString(\"hex\")} Encrypted (hex): ${ciphertext.toString(\r\n\t\t\t\t\t\"hex\"\r\n\t\t\t\t)} Length: ${ciphertext.length}`\r\n\t\t\t);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tremovePadding(str) {\r\n\t\tconst paddingLength = str.charCodeAt(str.length - 1);\r\n\t\treturn str.slice(0, -paddingLength);\r\n\t}\r\n\r\n\tclearLocalDevicedTimeout() {\r\n\t\tif (this.localDevicesTimeout) {\r\n\t\t\tthis.adapter.clearTimeout(this.localDevicesTimeout);\r\n\t\t}\r\n\t}\r\n}\r\n"]}