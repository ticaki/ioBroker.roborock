{"version":3,"file":"message_parser.js","sourceRoot":"","sources":["../../src/lib/message_parser.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Roborock } from \"../main\";\r\n\r\nimport crypto from \"crypto\";\r\nimport CRC32 from \"crc-32\";\r\nimport { Parser } from \"binary-parser\";\r\nimport forge from \"node-forge\";\r\n\r\nconst HEADER_LEN = 3 + 4 + 4 + 4 + 2 + 2; // version + seq + random + timestamp + protocol + payloadLen\r\nconst CRC32_LEN = 4; // CRC32 length\r\n\r\nlet seq = 1;\r\nlet random = 4711; // Should be initialized with a number 0 - 1999?\r\n\r\nconst keypair = forge.pki.rsa.generateKeyPair(2048);\r\nconst keys = {\r\n\tpublic: { n: keypair.publicKey.n.toString(16), e: keypair.publicKey.e.toString(16) },\r\n\tprivate: {\r\n\t\tn: keypair.privateKey.n.toString(16),\r\n\t\te: keypair.privateKey.e.toString(16),\r\n\t\td: keypair.privateKey.d.toString(16),\r\n\t\tp: keypair.privateKey.p.toString(16),\r\n\t\tq: keypair.privateKey.q.toString(16),\r\n\t\tdmp1: keypair.privateKey.dP.toString(16),\r\n\t\tdmq1: keypair.privateKey.dQ.toString(16),\r\n\t\tcoeff: keypair.privateKey.qInv.toString(16),\r\n\t},\r\n};\r\n\r\n// This value is stored hardcoded in librrcodec.so, encrypted by the value of \"com.roborock.iotsdk.appsecret\" from AndroidManifest.xml.\r\nconst salt = \"TXdfu$jyZ#TZHsg4\";\r\n\r\nconst messageParser = new Parser()\r\n\t.endianess(\"big\")\r\n\t.string(\"version\", {\r\n\t\tlength: 3,\r\n\t})\r\n\t.uint32(\"seq\")\r\n\t.uint32(\"random\")\r\n\t.uint32(\"timestamp\")\r\n\t.uint16(\"protocol\")\r\n\t.uint16(\"payloadLen\")\r\n\t.buffer(\"payload\", {\r\n\t\tlength: \"payloadLen\",\r\n\t})\r\n\t.uint32(\"crc32\");\r\n\r\nexport class message_parser {\r\n\tadapter: Roborock;\r\n\r\n\tconstructor(adapter: Roborock) {\r\n\t\tthis.adapter = adapter;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {Buffer} message\r\n\t * @param {string} duid\r\n\t */\r\n\t_decodeMsg(message, duid) {\r\n\t\tconst decodedMessages: any[] = [];\r\n\t\tlet offset = 0;\r\n\t\twhile (offset + 3 <= message.length) {\r\n\t\t\t// Do some checks before trying to decode the message.\r\n\t\t\tconst version = message.toString(\"latin1\", offset, offset + 3);\r\n\r\n\t\t\tif (version !== \"1.0\" && version !== \"A01\") {\r\n\t\t\t\t// Skip to the next message if the version is not recognized\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Unsupported version \"${version}\" at offset ${offset}. Skipping to next message.`);\r\n\t\t\t\toffset++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tlet data;\r\n\t\t\ttry {\r\n\t\t\t\tdata = this.getParsedData(message.subarray(offset));\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Message parsing failed at offset ${offset}: ${error}`);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tconst msgLen = HEADER_LEN + data.payloadLen + CRC32_LEN;\r\n\t\t\tif (offset + msgLen > message.length) {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Message at offset ${offset} is incomplete (need ${msgLen} bytes, have ${message.length - offset}).`);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tconst msgBuffer = message.subarray(offset, offset + msgLen);\r\n\t\t\tconst crc32 = CRC32.buf(msgBuffer.subarray(0, msgBuffer.length - 4)) >>> 0;\r\n\t\t\tconst expectedCrc32 = msgBuffer.readUInt32BE(msgBuffer.length - 4);\r\n\t\t\tif (crc32 !== expectedCrc32) {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] CRC32 mismatch at offset ${offset}: ${crc32} != ${expectedCrc32}`);\r\n\t\t\t\toffset += msgLen;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst localKeys = this.adapter.http_api.getMatchedLocalKeys();\r\n\t\t\tconst localKey = localKeys.get(duid);\r\n\t\t\tif (!localKey) {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Local key not found for DUID ${duid}`);\r\n\t\t\t\toffset += msgLen;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tconst dataCopy = Object.assign({}, data);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tswitch (version) {\r\n\t\t\t\t\tcase \"1.0\": {\r\n\t\t\t\t\t\tconst aesKey = this.md5bin(this._encodeTimestamp(dataCopy.timestamp) + localKey + salt);\r\n\t\t\t\t\t\tconst decipher = crypto.createDecipheriv(\"aes-128-ecb\", aesKey, null);\r\n\t\t\t\t\t\tdataCopy.payload = Buffer.concat([decipher.update(dataCopy.payload), decipher.final()]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase \"A01\": {\r\n\t\t\t\t\t\tconst iv = this.md5hex(dataCopy.random.toString(16).padStart(8, \"0\") + \"726f626f726f636b2d67a6d6da\").substring(8, 24);\r\n\t\t\t\t\t\tconst decipher = crypto.createDecipheriv(\"aes-128-cbc\", localKey, iv);\r\n\t\t\t\t\t\tdataCopy.payload = Buffer.concat([decipher.update(dataCopy.payload), decipher.final()]);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdelete dataCopy.payloadLen;\r\n\t\t\t\tdecodedMessages.push(dataCopy);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tthis.adapter.log.error(`failed to _decodeMsg: ${err.stack}. Local binary data: ${message.toString(\"hex\")}`, null, duid);\r\n\t\t\t}\r\n\t\t\t// this.adapter.catchError(error, \"_decodeMessage\", \"none\");\r\n\t\t\toffset += msgLen;\r\n\t\t}\r\n\t\tif (decodedMessages.length === 0) return null;\r\n\t\treturn decodedMessages.length === 1 ? decodedMessages[0] : decodedMessages;\r\n\t}\r\n\r\n\tgetParsedData(data) {\r\n\t\treturn messageParser.parse(data);\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} duid\r\n\t * @param {number} protocol\r\n\t * @param {number} messageID\r\n\t * @param {string} method\r\n\t * @param {Array | Object} params\r\n\t * @returns {Promise<string>}\r\n\t */\r\n\tasync buildPayload(duid, protocol, messageID, method, params) {\r\n\t\tconst timestamp = Math.floor(Date.now() / 1000);\r\n\t\tconst endpoint = await this.adapter.mqtt_api.ensureEndpoint();\r\n\t\tconst version = await this.adapter.getDeviceProtocolVersion(duid);\r\n\t\t// this.adapter.log.debug(\"sendRequest started with: \" + requestId);\r\n\r\n\t\tif (version == \"A01\") {\r\n\t\t\tconst payload = JSON.stringify({ dps: { [method]: params }, t: timestamp });\r\n\t\t\treturn payload;\r\n\t\t} else {\r\n\t\t\tconst inner: any = {\r\n\t\t\t\tid: messageID,\r\n\t\t\t\tmethod: method,\r\n\t\t\t\tparams: params,\r\n\t\t\t};\r\n\r\n\t\t\tif (method == \"get_photo\") {\r\n\t\t\t\tparams.endpoint = endpoint;\r\n\t\t\t\tparams.security = {\r\n\t\t\t\t\tcipher_suite: 0,\r\n\t\t\t\t\tpub_key: keys.public,\r\n\t\t\t\t};\r\n\t\t\t} else if (method == \"get_map_v1\" || method == \"get_clean_record_map\") {\r\n\t\t\t\tinner.security = {\r\n\t\t\t\t\tendpoint: endpoint,\r\n\t\t\t\t\tnonce: this.adapter.nonce.toString(\"hex\").toUpperCase(),\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tconst payload = JSON.stringify({\r\n\t\t\t\tdps: {\r\n\t\t\t\t\t[protocol]: JSON.stringify(inner),\r\n\t\t\t\t},\r\n\t\t\t\tt: timestamp,\r\n\t\t\t});\r\n\r\n\t\t\treturn payload;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} duid\r\n\t * @param {number} protocol\r\n\t * @param {number} timestamp\r\n\t * @param {string} payload\r\n\t */\r\n\tasync buildRoborockMessage(duid, protocol, timestamp, payload) {\r\n\t\tconst version = await this.adapter.getDeviceProtocolVersion(duid);\r\n\t\tconst localKeys = this.adapter.http_api.getMatchedLocalKeys();\r\n\r\n\t\tlet encrypted;\r\n\r\n\t\t// credits to rovo89 for the following code. Especially for version A01!\r\n\t\tif (version == \"1.0\") {\r\n\t\t\tconst localKey = localKeys.get(duid);\r\n\t\t\tconst aesKey = this.md5bin(this._encodeTimestamp(timestamp) + localKey + salt);\r\n\t\t\tconst cipher = crypto.createCipheriv(\"aes-128-ecb\", aesKey, null);\r\n\t\t\tencrypted = Buffer.concat([cipher.update(payload), cipher.final()]);\r\n\t\t} else if (version == \"A01\") {\r\n\t\t\tprotocol = 101;\r\n\t\t\tconst localKey = localKeys.get(duid);\r\n\t\t\tconst randomHex = random.toString(16).padStart(8, \"0\"); // Convert the number to an 8-character hex string (zero-padded if needed)\r\n\t\t\tconst iv = this.md5hex(randomHex + \"726f626f726f636b2d67a6d6da\").substring(8, 24); // 726f626f726f636b2d67a6d6da can be found in librrcodec.so of version 4.0 of the roborock app\r\n\r\n\t\t\tconst keyBuffer = Buffer.from(localKey, \"utf-8\");\r\n\t\t\tconst ivBuffer = Buffer.from(iv, \"utf-8\");\r\n\t\t\tconst payloadBuffer = Buffer.isBuffer(payload) ? payload : Buffer.from(payload, \"utf-8\");\r\n\r\n\t\t\t// Apply PKCS7 padding\r\n\t\t\tconst blockSize = 16;\r\n\t\t\tconst padding = blockSize - (payloadBuffer.length % blockSize);\r\n\t\t\tconst paddingBuffer = Buffer.alloc(padding, padding);\r\n\t\t\tconst paddedPayload = Buffer.concat([payloadBuffer, paddingBuffer]);\r\n\t\t\tconst cipher = crypto.createCipheriv(\"aes-128-cbc\", keyBuffer, ivBuffer);\r\n\t\t\tencrypted = Buffer.concat([cipher.update(paddedPayload), cipher.final()]);\r\n\r\n\t\t\t// const cipher = crypto.createCipheriv(\"aes-128-cbc\", localKey, iv);\r\n\t\t\t// encrypted = Buffer.concat([cipher.update(payload), cipher.final()]);\r\n\t\t}\r\n\r\n\t\tif (encrypted) {\r\n\t\t\tconst msg = Buffer.alloc(23 + encrypted.length);\r\n\t\t\tmsg.write(version);\r\n\t\t\tmsg.writeUint32BE(seq++ & 0xffffffff, 3);\r\n\t\t\tmsg.writeUint32BE(random++ & 0xffffffff, 7);\r\n\t\t\tmsg.writeUint32BE(timestamp, 11);\r\n\t\t\tmsg.writeUint16BE(protocol, 15);\r\n\t\t\tmsg.writeUint16BE(encrypted.length, 17);\r\n\t\t\tencrypted.copy(msg, 19);\r\n\t\t\tconst crc32 = CRC32.buf(msg.subarray(0, msg.length - 4)) >>> 0;\r\n\t\t\tmsg.writeUint32BE(crc32, msg.length - 4);\r\n\r\n\t\t\treturn msg;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {number} timestamp\r\n\t */\r\n\t_encodeTimestamp(timestamp) {\r\n\t\tconst hex = timestamp.toString(16).padStart(8, \"0\").split(\"\");\r\n\t\treturn [5, 6, 3, 7, 1, 2, 0, 4].map((idx) => hex[idx]).join(\"\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} str\r\n\t */\r\n\tmd5bin(str) {\r\n\t\treturn crypto.createHash(\"md5\").update(str).digest();\r\n\t}\r\n\r\n\t/**\r\n\t * @param {string} str\r\n\t */\r\n\tmd5hex(str) {\r\n\t\treturn crypto.createHash(\"md5\").update(str).digest(\"hex\");\r\n\t}\r\n}\r\n"]}