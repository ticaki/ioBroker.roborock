{"version":3,"file":"message_parser.js","sourceRoot":"","sources":["../../src/lib/message_parser.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Roborock } from \"../main\";\r\nimport { cryptoEngine } from \"./cryptoEngine\";\r\n\r\nimport CRC32 from \"crc-32\";\r\nimport { Parser } from \"binary-parser\";\r\nimport forge from \"node-forge\";\r\n\r\nconst HEADER_LEN = 3 + 4 + 4 + 4 + 2 + 2; // version + seq + random + timestamp + protocol + payloadLen\r\nconst CRC32_LEN = 4;\r\n\r\n// Global rolling counters (wrapped to uint32)\r\nlet seq = 1;\r\nlet random = 4711;\r\n\r\n// Discovery/app salt (from librrcodec.so; encrypted via com.roborock.iotsdk.appsecret)\r\nconst salt = \"TXdfu$jyZ#TZHsg4\";\r\n\r\n// Lazy RSA keypair (only when needed for get_photo)\r\nlet keys: {\r\n\tpublic: { n: string; e: string };\r\n\tprivate: {\r\n\t\tn: string;\r\n\t\te: string;\r\n\t\td: string;\r\n\t\tp: string;\r\n\t\tq: string;\r\n\t\tdmp1: string;\r\n\t\tdmq1: string;\r\n\t\tcoeff: string;\r\n\t};\r\n} | null = null;\r\n\r\nfunction ensureRsaKeys() {\r\n\tif (keys) return keys;\r\n\tconst kp = forge.pki.rsa.generateKeyPair(2048);\r\n\tkeys = {\r\n\t\tpublic: { n: kp.publicKey.n.toString(16), e: kp.publicKey.e.toString(16) },\r\n\t\tprivate: {\r\n\t\t\tn: kp.privateKey.n.toString(16),\r\n\t\t\te: kp.privateKey.e.toString(16),\r\n\t\t\td: kp.privateKey.d.toString(16),\r\n\t\t\tp: kp.privateKey.p.toString(16),\r\n\t\t\tq: kp.privateKey.q.toString(16),\r\n\t\t\tdmp1: kp.privateKey.dP.toString(16),\r\n\t\t\tdmq1: kp.privateKey.dQ.toString(16),\r\n\t\t\tcoeff: kp.privateKey.qInv.toString(16),\r\n\t\t},\r\n\t};\r\n\treturn keys;\r\n}\r\n\r\nconst messageParser = new Parser()\r\n\t.endianess(\"big\")\r\n\t.string(\"version\", { length: 3 })\r\n\t.uint32(\"seq\")\r\n\t.uint32(\"random\")\r\n\t.uint32(\"timestamp\")\r\n\t.uint16(\"protocol\")\r\n\t.uint16(\"payloadLen\")\r\n\t.buffer(\"payload\", { length: \"payloadLen\" })\r\n\t.uint32(\"crc32\");\r\n\r\nexport class message_parser {\r\n\tadapter: Roborock;\r\n\r\n\tconstructor(adapter: Roborock) {\r\n\t\tthis.adapter = adapter;\r\n\t}\r\n\r\n\t/**\r\n\t * Decode one or more concatenated messages from a buffer.\r\n\t */\r\n\t_decodeMsg(message: Buffer, duid: string) {\r\n\t\tconst decoded: any[] = [];\r\n\t\tlet offset = 0;\r\n\r\n\t\twhile (offset + 3 <= message.length) {\r\n\t\t\tconst version = message.toString(\"latin1\", offset, offset + 3);\r\n\t\t\tif (version !== \"1.0\" && version !== \"A01\" && version !== \"L01\") {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Unsupported version \"${version}\" at offset ${offset}. Skipping byte.`);\r\n\t\t\t\toffset += 1;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet data: any;\r\n\t\t\ttry {\r\n\t\t\t\tdata = this.getParsedData(message.subarray(offset));\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Message parsing failed at offset ${offset}: ${error}`);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tconst msgLen = HEADER_LEN + data.payloadLen + CRC32_LEN;\r\n\t\t\tif (msgLen <= 0 || offset + msgLen > message.length) {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Incomplete message at offset ${offset} (need ${msgLen}, have ${message.length - offset}).`);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tconst msgBuffer = message.subarray(offset, offset + msgLen);\r\n\t\t\tconst crc32 = CRC32.buf(msgBuffer.subarray(0, msgLen - 4)) >>> 0;\r\n\t\t\tconst expectedCrc32 = msgBuffer.readUInt32BE(msgLen - 4);\r\n\t\t\tif (crc32 !== expectedCrc32) {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] CRC32 mismatch at offset ${offset}: ${crc32} != ${expectedCrc32}`);\r\n\t\t\t\toffset += msgLen;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst localKey = this.adapter.http_api.getMatchedLocalKeys().get(duid);\r\n\t\t\tif (!localKey) {\r\n\t\t\t\tthis.adapter.log.error(`[decodeMsg] Local key not found for DUID ${duid}`);\r\n\t\t\t\toffset += msgLen;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst frame = { ...data };\r\n\t\t\ttry {\r\n\t\t\t\tswitch (version) {\r\n\t\t\t\t\tcase \"1.0\": {\r\n\t\t\t\t\t\tframe.payload = cryptoEngine.decryptV1(frame.payload, localKey, frame.timestamp);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase \"A01\": {\r\n\t\t\t\t\t\tframe.payload = cryptoEngine.decryptA01(frame.payload, localKey, frame.random);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase \"L01\": {\r\n\t\t\t\t\t\tframe.payload = cryptoEngine.decryptL01(\r\n\t\t\t\t\t\t\tframe.payload,\r\n\t\t\t\t\t\t\tlocalKey,\r\n\t\t\t\t\t\t\tframe.timestamp,\r\n\t\t\t\t\t\t\tframe.seq,\r\n\t\t\t\t\t\t\tframe.random,\r\n\t\t\t\t\t\t\tthis.adapter.connectNonce,\r\n\t\t\t\t\t\t\tthis.adapter.ackNonce?.get(duid)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdelete frame.payloadLen;\r\n\t\t\t\tdecoded.push(frame);\r\n\t\t\t} catch (err: any) {\r\n\t\t\t\tthis.adapter.log.error(`failed to _decodeMsg: ${err?.stack || err}. Local binary: ${message.toString(\"hex\")}`, null, duid);\r\n\t\t\t}\r\n\r\n\t\t\toffset += msgLen;\r\n\t\t}\r\n\r\n\t\tif (decoded.length === 0) return null;\r\n\t\treturn decoded.length === 1 ? decoded[0] : decoded;\r\n\t}\r\n\r\n\tgetParsedData(data: Buffer) {\r\n\t\treturn messageParser.parse(data);\r\n\t}\r\n\r\n\t/**\r\n\t * Build device JSON payload (inner JSON for dps).\r\n\t */\r\n\tasync buildPayload(duid: string, protocol: number, messageID: number, method: string, params: any[] | Record<string, any>) {\r\n\t\tconst timestamp = Math.floor(Date.now() / 1000);\r\n\t\tconst endpoint = await this.adapter.mqtt_api.ensureEndpoint();\r\n\t\tconst version = await this.adapter.getDeviceProtocolVersion(duid);\r\n\r\n\t\tif (version === \"A01\") {\r\n\t\t\treturn JSON.stringify({ dps: { [method]: params }, t: timestamp });\r\n\t\t}\r\n\r\n\t\tconst inner: any = { id: messageID, method, params };\r\n\r\n\t\tif (method === \"get_photo\") {\r\n\t\t\tconst kp = ensureRsaKeys();\r\n\t\t\t(params as any).endpoint = endpoint;\r\n\t\t\t(params as any).security = { cipher_suite: 0, pub_key: kp.public };\r\n\t\t} else if (method === \"get_map_v1\" || method === \"get_clean_record_map\") {\r\n\t\t\tinner.security = { endpoint, nonce: this.adapter.nonce.toString(\"hex\").toUpperCase() };\r\n\t\t}\r\n\r\n\t\treturn JSON.stringify({ dps: { [protocol]: JSON.stringify(inner) }, t: timestamp });\r\n\t}\r\n\r\n\t/**\r\n\t * Wraps the payload into a Roborock local frame and encrypts according to protocol version.\r\n\t */\r\n\tasync buildRoborockMessage(duid: string, protocol: number, timestamp: number, payload: string | Buffer) {\r\n\t\tconst version = await this.adapter.getDeviceProtocolVersion(duid);\r\n\t\tconst localKey = this.adapter.http_api.getMatchedLocalKeys().get(duid);\r\n\r\n\t\tif (!localKey) {\r\n\t\t\tthis.adapter.log.error(`[buildRoborockMessage] No localKey for DUID ${duid}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tlet encrypted: Buffer | undefined;\r\n\t\tconst payloadBuf = this._toBuf(payload);\r\n\r\n\t\ttry {\r\n\t\t\tswitch (version) {\r\n\t\t\t\tcase \"1.0\": {\r\n\t\t\t\t\tencrypted = cryptoEngine.encryptV1(payloadBuf, localKey, timestamp);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase \"A01\": {\r\n\t\t\t\t\tencrypted = cryptoEngine.encryptA01(payloadBuf, localKey, random);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tcase \"L01\": {\r\n\t\t\t\t\tencrypted = cryptoEngine.encryptL01(payloadBuf, localKey, timestamp, seq, random, this.adapter.connectNonce, this.adapter.ackNonce?.get(duid));\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.adapter.log.error(`[buildRoborockMessage] Unsupported version ${version}`);\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} catch (err: any) {\r\n\t\t\tthis.adapter.log.error(`[buildRoborockMessage] Encryption failed for ${version}: ${err?.stack || err}`);\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!encrypted) return false;\r\n\r\n\t\t// Build frame\r\n\t\tconst s = this._wrap32(seq++);\r\n\t\tconst r = this._wrap32(random++);\r\n\t\tconst msg = Buffer.alloc(23 + encrypted.length);\r\n\t\tmsg.write(version);\r\n\t\tmsg.writeUInt32BE(s, 3);\r\n\t\tmsg.writeUInt32BE(r, 7);\r\n\t\tmsg.writeUInt32BE(timestamp >>> 0, 11);\r\n\t\tmsg.writeUInt16BE(protocol, 15);\r\n\t\tmsg.writeUInt16BE(encrypted.length, 17);\r\n\t\tencrypted.copy(msg, 19);\r\n\t\tconst crc32 = CRC32.buf(msg.subarray(0, msg.length - 4)) >>> 0;\r\n\t\tmsg.writeUInt32BE(crc32, msg.length - 4);\r\n\r\n\t\treturn msg;\r\n\t}\r\n\r\n\t/**\r\n\t * Timestamp permutation as used by Roborock.\r\n\t */\r\n\t_encodeTimestamp(timestamp: number) {\r\n\t\tconst hex = timestamp.toString(16).padStart(8, \"0\").split(\"\");\r\n\t\treturn [5, 6, 3, 7, 1, 2, 0, 4].map((idx) => hex[idx]).join(\"\");\r\n\t}\r\n\r\n\t// ---------- small local utilities (kept inside the class) ----------\r\n\r\n\tprivate _toBuf(input: string | Buffer) {\r\n\t\treturn Buffer.isBuffer(input) ? input : Buffer.from(input, \"utf-8\");\r\n\t}\r\n\r\n\tprivate _wrap32(v: number) {\r\n\t\t// keep in uint32 space\r\n\t\treturn v >>> 0;\r\n\t}\r\n\r\n\tprivate _hex8(v: number) {\r\n\t\treturn (v >>> 0).toString(16).padStart(8, \"0\");\r\n\t}\r\n}\r\n"]}