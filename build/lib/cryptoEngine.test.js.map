{"version":3,"file":"cryptoEngine.test.js","sourceRoot":"","sources":["../../src/lib/cryptoEngine.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { cryptoEngine } from \"./cryptoEngine\";\r\nimport { expect } from \"chai\";\r\n\r\ndescribe(\"cryptoEngine L01\", () => {\r\n\tconst localKey = \"byteTheDust\";\r\n\tconst timestamp = 1737731337;\r\n\tconst seq = 42;\r\n\tconst random = 1337;\r\n\tconst connectNonce = 1234;\r\n\tconst ackNonce = 5678;\r\n\r\n\tit(\"should encrypt and decrypt L01 payload correctly\", () => {\r\n\t\tconst payload = Buffer.from(\"Hello Roborock L01\", \"utf-8\");\r\n\r\n\t\tconst encrypted = cryptoEngine.encryptL01(\r\n\t\t\tpayload,\r\n\t\t\tlocalKey,\r\n\t\t\ttimestamp,\r\n\t\t\tseq,\r\n\t\t\trandom,\r\n\t\t\tconnectNonce,\r\n\t\t\tackNonce\r\n\t\t);\r\n\r\n\t\texpect(encrypted).to.be.instanceOf(Buffer);\r\n\t\texpect(encrypted.length).to.be.greaterThan(payload.length); // GCM appends auth tag\r\n\r\n\t\tconst decrypted = cryptoEngine.decryptL01(\r\n\t\t\tencrypted,\r\n\t\t\tlocalKey,\r\n\t\t\ttimestamp,\r\n\t\t\tseq,\r\n\t\t\trandom,\r\n\t\t\tconnectNonce,\r\n\t\t\tackNonce\r\n\t\t);\r\n\r\n\t\texpect(decrypted.toString(\"utf-8\")).to.equal(payload.toString(\"utf-8\"));\r\n\t});\r\n\r\n\tit(\"should throw if nonces are missing\", () => {\r\n\t\tconst payload = Buffer.from(\"Test Missing Nonces\", \"utf-8\");\r\n\r\n\t\texpect(() =>\r\n\t\t\tcryptoEngine.encryptL01(payload, localKey, timestamp, seq, random, 0 as any, undefined)\r\n\t\t).to.throw(\"Missing nonces for L01\");\r\n\r\n\t\texpect(() =>\r\n\t\t\tcryptoEngine.decryptL01(payload, localKey, timestamp, seq, random, 0 as any, undefined)\r\n\t\t).to.throw(\"Missing nonces for L01\");\r\n\t});\r\n});\r\n\r\ndescribe(\"cryptoEngine L01 - Official Vectors\", () => {\r\n\tconst localKey = \"b8Hj5mFk3QzT7rLp\";\r\n\tconst timestamp = 1753606905;\r\n\tconst sequence = 1;\r\n\tconst nonce = 304251;\r\n\tconst connectNonce = 893563;\r\n\tconst ackNonce = 485592656;\r\n\r\n\tconst plainPayload =\r\n\t\t'{\"dps\":{\"101\":\"{\\\\\"id\\\\\":1806,\\\\\"method\\\\\":\\\\\"get_prop\\\\\",\\\\\"params\\\\\":[\\\\\"get_status\\\\\"]}\"},\"t\":1753606905}';\r\n\r\n\tconst encryptedPayload = Uint8Array.from([\r\n\t\t253, 96, 200, 218, 202, 28, 202, 230, 127, 96, 119, 71, 123, 250, 157, 55, 24, 154, 56, 215,\r\n\t\t91, 60, 74, 144, 124, 36, 53, 211, 193, 70, 238, 132, 216, 249, 149, 151, 227, 225, 87, 26,\r\n\t\t1, 89, 97, 206, 170, 77, 100, 188, 54, 149, 250, 224, 36, 195, 65, 103, 55, 215, 113, 80,\r\n\t\t52, 29, 226, 156, 173, 47, 149, 191, 175, 83, 35, 88, 241, 43, 191, 248, 159, 20, 15, 239,\r\n\t\t91, 30, 226, 132, 195, 171, 254, 59, 131, 165, 119, 145, 10, 114, 5, 109, 171, 77, 90, 117,\r\n\t\t177, 130, 209, 160, 203, 161, 69, 227, 228, 80, 243, 146, 116, 67,\r\n\t]);\r\n\r\n\tit(\"should encrypt to the known vector\", () => {\r\n\t\tconst encrypted = cryptoEngine.encryptL01(\r\n\t\t\tBuffer.from(plainPayload, \"utf-8\"),\r\n\t\t\tlocalKey,\r\n\t\t\ttimestamp,\r\n\t\t\tsequence,\r\n\t\t\tnonce,\r\n\t\t\tconnectNonce,\r\n\t\t\tackNonce\r\n\t\t);\r\n\r\n\t\texpect(Array.from(encrypted)).to.deep.equal(Array.from(encryptedPayload));\r\n\t});\r\n\r\n\tit(\"should decrypt the known vector\", () => {\r\n\t\tconst decrypted = cryptoEngine.decryptL01(\r\n\t\t\tBuffer.from(encryptedPayload),\r\n\t\t\tlocalKey,\r\n\t\t\ttimestamp,\r\n\t\t\tsequence,\r\n\t\t\tnonce,\r\n\t\t\tconnectNonce,\r\n\t\t\tackNonce\r\n\t\t);\r\n\r\n\t\texpect(decrypted.toString(\"utf-8\")).to.equal(plainPayload);\r\n\t});\r\n});\r\n"]}