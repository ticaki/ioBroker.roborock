{"version":3,"file":"requestsHandler.js","sourceRoot":"","sources":["../../src/lib/requestsHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Roborock } from \"../main\";\n\nimport fs from \"fs\";\nimport zlib from \"zlib\";\nimport { RRMapParser } from \"./RRMapParser\";\nimport { MapCreator } from \"./mapCreator\";\nimport { messageParser } from \"./messageParser\";\n\nconst requestTimeout = 30000; // 30s\n\nconst mappedCleanSummary = {\n\t0: \"clean_time\",\n\t1: \"clean_area\",\n\t2: \"clean_count\",\n\t3: \"records\",\n};\n\nconst mappedCleaningRecordAttribute = {\n\t0: \"begin\",\n\t1: \"end\",\n\t2: \"duration\",\n\t3: \"area\",\n\t4: \"error\",\n\t5: \"complete\",\n\t6: \"start_type\",\n\t7: \"clean_type\",\n\t8: \"finish_reason\",\n\t9: \"dust_collection_status\",\n};\n\nconst parameterFolders = {\n\tget_mop_mode: \"deviceStatus\",\n\tget_water_box_custom_mode: \"deviceStatus\",\n\tget_consumable: \"consumables\",\n\tget_carpet_mode: \"deviceStatus\",\n\tget_carpet_clean_mode: \"deviceStatus\",\n\tget_carpet_cleaning_mode: \"deviceStatus\",\n};\n\nexport class requestsHandler {\n\tadapter: Roborock;\n\tidCounter: number;\n\tmessageQueue: Map<string, any>;\n\tmessageParser: messageParser;\n\tmapParser: RRMapParser;\n\tmapCreator: MapCreator;\n\tmqttResetInterval: NodeJS.Timeout | null = null;\n\tcached_get_status_value: any[];\n\n\tconstructor(adapter: Roborock) {\n\t\tthis.adapter = adapter;\n\n\t\tthis.idCounter = 1;\n\n\t\tthis.messageQueue = new Map();\n\n\t\tthis.messageParser = new messageParser(this.adapter);\n\n\t\tthis.mapParser = new RRMapParser(this.adapter);\n\t\tthis.mapCreator = new MapCreator(this.adapter);\n\n\t\tthis.cached_get_status_value = [];\n\n\t\t// Schedule MQTT API reset every hour\n\t\tthis.scheduleMqttReset();\n\t}\n\n\t/**\n\t * Schedules the MQTT API to be reset every hour.\n\t */\n\tscheduleMqttReset() {\n\t\t// Clear any existing interval if present\n\t\tif (this.mqttResetInterval) {\n\t\t\tclearInterval(this.mqttResetInterval);\n\t\t}\n\t\t// Set an interval to reset the MQTT API every 1 hour (3600000 ms)\n\t\tthis.mqttResetInterval = setInterval(async () => {\n\t\t\tawait this.adapter.resetMqttApi();\n\t\t}, 3600000);\n\t}\n\n\t/**\n\t * @param {string} duid\n\t */\n\tasync getStatus(duid) {\n\t\tconst productCategory = await this.adapter.http_api.getProductCategory(duid);\n\t\t// Add vacuum class here after adjusting it\n\n\t\tswitch (productCategory) {\n\t\t\tcase \"roborock.wetdryvac\":\n\t\t\t\t// Directly send the request. Dry vacs never return data directly. No promise possible because of missing request ID\n\t\t\t\tthis.sendRequest(\n\t\t\t\t\tduid,\n\t\t\t\t\t\"10000\",\n\t\t\t\t\t\"[200,201,202,203,204,205,206,207,208,209,210,212,213,214,215,216,221,222,223,224,225,226,227,228,235,210,10002,229,10004,10005,10007,230,237,238]\"\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"robot.vacuum.cleaner\":\n\t\t\t\treturn await this.getParameter(duid, \"get_prop\", [\"get_status\"]);\n\t\t}\n\t}\n\t/**\n\t * @param {string} duid\n\t * @param {number} startTime\n\t */\n\tasync getCleaningRecordMap(duid, startTime) {\n\t\ttry {\n\t\t\tconst cleaningRecordMap = await this.sendRequest(duid, \"get_clean_record_map\", { start_time: startTime }) as Buffer;\n\t\t\tconst parsedData = await this.mapParser.parsedata(cleaningRecordMap);\n\t\t\tthis.adapter.log.debug(`Generating map for cleaning record with start time ${startTime} for duid ${duid}`); // never remove this log, it is very useful for debugging like room naming issues\n\t\t\tconst [mapBase64, mapBase64Truncated] = await this.mapCreator.canvasMap(parsedData);\n\n\t\t\treturn {\n\t\t\t\tmapBase64: mapBase64,\n\t\t\t\tmapBase64Truncated: mapBase64Truncated,\n\t\t\t\tmapData: JSON.stringify(parsedData),\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthis.adapter.catchError(error, \"get_clean_record_map\", duid);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} duid\n\t */\n\tasync getCleanSummary(duid) {\n\t\ttry {\n\t\t\tconst cleaningAttributes = await this.sendRequest(duid, \"get_clean_summary\", []) as Buffer;\n\n\t\t\tfor (const cleaningAttribute in cleaningAttributes) {\n\t\t\t\tconst mappedAttribute = mappedCleanSummary[cleaningAttribute] || cleaningAttribute;\n\t\t\t\tconst cleaningAttributeCommon = this.adapter.device_features.getCommonCleaningInfo(mappedAttribute);\n\n\t\t\t\tif ([\"clean_time\", \"clean_area\", \"clean_count\"].includes(mappedAttribute)) {\n\t\t\t\t\tawait this.adapter.ensureState(\n\t\t\t\t\t\t`Devices.${duid}.cleaningInfo.${cleaningAttribute}`,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tval: this.calculateCleaningValue(mappedAttribute, cleaningAttributes[cleaningAttribute]),\n\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcleaningAttributeCommon\n\t\t\t\t\t);\n\t\t\t\t} else if (mappedAttribute == \"records\") {\n\t\t\t\t\tconst cleaningRecordsJSON = [];\n\n\t\t\t\t\tfor (const cleaningRecord in cleaningAttributes[cleaningAttribute] as Number) {\n\t\t\t\t\t\tconst cleaningRecordID = cleaningAttributes[cleaningAttribute][cleaningRecord];\n\t\t\t\t\t\tconst cleaningRecordAttributes = (await this.sendRequest(duid, \"get_clean_record\", [cleaningRecordID]) as Buffer)[0];\n\n\t\t\t\t\t\tcleaningRecordsJSON[cleaningRecord] = cleaningRecordAttributes;\n\n\t\t\t\t\t\tfor (const cleaningRecordAttribute in cleaningRecordAttributes as Number) {\n\t\t\t\t\t\t\tconst mappedRecordAttribute = mappedCleaningRecordAttribute[cleaningRecordAttribute] || cleaningRecordAttribute;\n\t\t\t\t\t\t\tconst cleaningRecordCommon = this.adapter.device_features.getCommonCleaningRecords(mappedRecordAttribute);\n\n\t\t\t\t\t\t\tawait this.adapter.ensureState(\n\t\t\t\t\t\t\t\t`Devices.${duid}.cleaningInfo.records.${cleaningRecord}.${mappedRecordAttribute}`,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tval: this.calculateRecordValue(mappedRecordAttribute, cleaningRecordAttributes[cleaningRecordAttribute]),\n\t\t\t\t\t\t\t\t\tack: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tcleaningRecordCommon\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.adapter.config.enable_map_creation == true) {\n\t\t\t\t\t\t\tconst mapArray = await this.getCleaningRecordMap(duid, cleaningAttributes[cleaningAttribute][cleaningRecord]);\n\t\t\t\t\t\t\tfor (const mapType in mapArray) {\n\t\t\t\t\t\t\t\tconst val = mapArray[mapType];\n\t\t\t\t\t\t\t\tthis.adapter.ensureState(`Devices.${duid}.cleaningInfo.records.${cleaningRecord}.map.${mapType}`, { val: val, ack: true });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst objectString = `Devices.${duid}.cleaningInfo.JSON`;\n\t\t\t\t\tawait this.adapter.createStateObjectHelper({path: objectString, name: \"cleaningInfoJSON\", type: \"string\", def: \"json\", read: true, write: false});\n\t\t\t\t\tthis.adapter.setStateAsync(`Devices.${duid}.cleaningInfo.JSON`, { val: JSON.stringify(cleaningRecordsJSON), ack: true });\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.adapter.catchError(error, \"get_clean_summary\", duid);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} duid\n\t */\n\tgetDockingStationStatus(duid) {\n\t\tconst dss = this.cached_get_status_value[duid].dss;\n\n\t\treturn {\n\t\t\tcleanFluidStatus: (dss >> 10) & 0b11,\n\t\t\twaterBoxFilterStatus: (dss >> 8) & 0b11,\n\t\t\tdustBagStatus: (dss >> 6) & 0b11,\n\t\t\tdirtyWaterBoxStatus: (dss >> 4) & 0b11,\n\t\t\tclearWaterBoxStatus: (dss >> 2) & 0b11,\n\t\t\tisUpdownWaterReady: dss & 0b11,\n\t\t};\n\t}\n\n\t/**\n\t * @param {string} duid\n\t * @param {string} parameter\n\t * @param {Object} [attribute]\n\t */\n\tasync getParameter(duid, parameter, attribute) {\n\t\tlet mode;\n\n\t\treturn this.sendRequest(duid, parameter, attribute)\n\t\t\t.then(async (value) => {\n\t\t\t\tif (!value) {\n\t\t\t\t\tthis.adapter.log.debug(`No value received for ${parameter} on ${duid}.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.adapter.log.debug(`Received value for ${parameter} on ${duid}: ${JSON.stringify(value)}`);\n\n\t\t\t\tswitch (parameter) {\n\t\t\t\t\tcase \"get_network_info\":\n\t\t\t\t\t\tmode = parameter;\n\t\t\t\t\t\tconst localDevice = this.adapter.local_api.localDevices[duid];\n\n\t\t\t\t\t\tfor (const attribute in value) {\n\t\t\t\t\t\t\tif (attribute == \"ip\" && !(await this.isCloudDevice(duid)) && !localDevice) {\n\t\t\t\t\t\t\t\tthis.adapter.local_api.localDevices[duid] = { ip: value[attribute], version: \"1.0\" };\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.adapter.ensureState(`Devices.${duid}.networkInfo.${attribute}`, { val: value[attribute], ack: true });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"get_consumable\":\n\t\t\t\t\t\tconst consumables = value[0];\n\n\t\t\t\t\t\tfor (const consumable in consumables) {\n\t\t\t\t\t\t\tconst commonConsumable = this.adapter.device_features.getCommonConsumable(consumable);\n\t\t\t\t\t\t\tconst value = commonConsumable && commonConsumable.unit == \"h\" ? Math.round(consumables[consumable] / (60 * 60)) : consumables[consumable];\n\n\t\t\t\t\t\t\tthis.adapter.ensureState(`Devices.${duid}.consumables.${consumable}`, { val: value, ack: true }, commonConsumable);\n\n\t\t\t\t\t\t\tconst resetConsumable = this.adapter.device_features.isResetableConsumable(consumable);\n\t\t\t\t\t\t\tif (resetConsumable) {\n\t\t\t\t\t\t\t\tthis.adapter.ensureState(`Devices.${duid}.resetConsumables.${consumable}`, { val: false, ack: true });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"get_prop\":\n\t\t\t\t\t\tif (attribute == \"get_status\") {\n\t\t\t\t\t\t\tthis.cached_get_status_value[duid] = value[0];\n\n\t\t\t\t\t\t\tfor (const attribute in this.cached_get_status_value[duid]) {\n\t\t\t\t\t\t\t\t// if (!(await this.adapter.getObjectAsync(`Devices.${duid}.deviceStatus.${attribute}`))) {\n\t\t\t\t\t\t\t\t// \tthis.adapter.log.warn(\n\t\t\t\t\t\t\t\t// \t\t`Unsupported attribute: ${attribute} of get_status with value ${this.cached_get_status_value[duid][attribute]}. Please contact the dev to add the newly found attribute of your robot. Model: ${robotModel}`\n\t\t\t\t\t\t\t\t// \t);\n\t\t\t\t\t\t\t\t// \tcontinue; // Skip unsupported attributes\n\t\t\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t\t\tif (typeof this.cached_get_status_value[duid][attribute] == \"object\") {\n\t\t\t\t\t\t\t\t\tthis.cached_get_status_value[duid][attribute] = JSON.stringify(this.cached_get_status_value[duid][attribute]);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tswitch (attribute) {\n\t\t\t\t\t\t\t\t\tcase \"dock_type\":\n\t\t\t\t\t\t\t\t\t\tthis.adapter.device_features.processDockType(attribute);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"dss\":\n\t\t\t\t\t\t\t\t\t\tawait this.adapter.createDockingStationObject(duid);\n\t\t\t\t\t\t\t\t\t\tconst dockingStationStatus = this.getDockingStationStatus(duid);\n\n\t\t\t\t\t\t\t\t\t\tfor (const state in dockingStationStatus) {\n\t\t\t\t\t\t\t\t\t\t\tthis.adapter.setStateAsync(`Devices.${duid}.dockingStationStatus.${state}`, { val: parseInt(dockingStationStatus[state]), ack: true });\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\tcase \"map_status\": {\n\t\t\t\t\t\t\t\t\t\tconst selectedMap = this.getSelectedMap(duid);\n\t\t\t\t\t\t\t\t\t\tif (selectedMap != null) {\n\t\t\t\t\t\t\t\t\t\t\tthis.cached_get_status_value[duid][attribute] = selectedMap;\n\n\t\t\t\t\t\t\t\t\t\t\tconst mapCount = await this.adapter.getStateAsync(`Devices.${duid}.floors.multi_map_count`);\n\n\t\t\t\t\t\t\t\t\t\t\t// Don't process load_multi_map for single level configuration\n\t\t\t\t\t\t\t\t\t\t\tif (mapCount) {\n\t\t\t\t\t\t\t\t\t\t\t\t// Sometimes mapCount is not available shortly after first start of adapter\n\t\t\t\t\t\t\t\t\t\t\t\tif (mapCount.val > 1) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst mapFromCommand = await this.adapter.getState(`Devices.${duid}.commands.load_multi_map`);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (mapFromCommand && mapFromCommand.val != selectedMap) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.adapter.setStateAsync(`Devices.${duid}.commands.load_multi_map`, selectedMap, true);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.getMap(duid);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcase \"state\": {\n\t\t\t\t\t\t\t\t\t\tconst isCleaning = this.isCleaning(duid);\n\t\t\t\t\t\t\t\t\t\tif (this.adapter.socket && isCleaning) {\n\t\t\t\t\t\t\t\t\t\t\tconst sendValue = { duid: duid, command: \"get_status\", parameters: { isCleaning: isCleaning } };\n\t\t\t\t\t\t\t\t\t\t\tthis.adapter.socket.send(JSON.stringify(sendValue));\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcase \"last_clean_t\":\n\t\t\t\t\t\t\t\t\t\tthis.cached_get_status_value[duid][attribute] = new Date(this.cached_get_status_value[duid][attribute]).toString();\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst value = this.cached_get_status_value[duid][attribute];\n\t\t\t\t\t\t\t\tconst commonDeviceStates = this.adapter.device_features.getCommonDeviceStates(attribute);\n\t\t\t\t\t\t\t\tthis.adapter.ensureState(`Devices.${duid}.deviceStatus.${attribute}`, { val: value, ack: true }, commonDeviceStates);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"get_room_mapping\":\n\t\t\t\t\t\tconst selectedMap = this.getSelectedMap(duid);\n\t\t\t\t\t\tif (selectedMap != null) {\n\t\t\t\t\t\t\tconst roomIDs = this.adapter.http_api.getMatchedRoomIDs();\n\n\t\t\t\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\t\t\t\tvalue.map(async ([shortID, roomID]) => {\n\t\t\t\t\t\t\t\t\tconst room = roomIDs.find((r) => r.id.toString() === roomID);\n\t\t\t\t\t\t\t\t\tconst roomName = room?.name || \"unknown\";\n\n\t\t\t\t\t\t\t\t\tconst objectString = `Devices.${duid}.floors.${selectedMap}.${shortID}`;\n\t\t\t\t\t\t\t\t\tawait this.adapter.createStateObjectHelper({path: objectString, name: roomName, type: \"boolean\", def: true, read: true, write: true});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst objectString = `Devices.${duid}.floors.cleanCount`;\n\t\t\t\t\t\t\tawait this.adapter.createStateObjectHelper({path: objectString, name: \"Clean count\", type: \"number\", def: 1, read: true, write: true});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"get_multi_maps_list\":\n\t\t\t\t\t\tconst mapInfo = value[0].map_info;\n\t\t\t\t\t\tconst maps = {};\n\n\t\t\t\t\t\t// Set states for numeric parameters\n\t\t\t\t\t\tfor (const mapParameter in value[0]) {\n\t\t\t\t\t\t\tif (typeof value[0][mapParameter] === \"number\") {\n\t\t\t\t\t\t\t\tconst statePath = `Devices.${duid}.floors.${mapParameter}`;\n\t\t\t\t\t\t\t\tthis.adapter.ensureState(statePath, { val: value[0][mapParameter], ack: true });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Create map folders\n\t\t\t\t\t\tfor (const map in mapInfo) {\n\t\t\t\t\t\t\tconst roomFloor = mapInfo[map][\"mapFlag\"];\n\t\t\t\t\t\t\tconst mapName = mapInfo[map][\"name\"];\n\t\t\t\t\t\t\tmaps[roomFloor] = mapName;\n\n\t\t\t\t\t\t\tconst objectPath = `Devices.${duid}.floors.${roomFloor}`;\n\t\t\t\t\t\t\tthis.adapter.setObjectAsync(objectPath, {\n\t\t\t\t\t\t\t\ttype: \"folder\",\n\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\tname: mapName,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Handle the load_multi_map command\n\t\t\t\t\t\tconst commandPath = `Devices.${duid}.commands.load_multi_map`;\n\t\t\t\t\t\tthis.adapter.log.debug(`commandPath: \"${commandPath}\"`);\n\n\t\t\t\t\t\tif (value[0][\"max_multi_map\"] > 1) {\n\t\t\t\t\t\t\tawait this.adapter.createStateObjectHelper({path: commandPath, name: \"Load map\", type: \"number\", def: 0, read: true, write: true, states: maps});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.adapter.delObjectAsync(commandPath);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"get_fw_features\":\n\t\t\t\t\t\tfor (const firmwareFeature in value) {\n\t\t\t\t\t\t\tconst featureID = value[firmwareFeature];\n\t\t\t\t\t\t\tconst objectString = `Devices.${duid}.firmwareFeatures.${firmwareFeature}`;\n\t\t\t\t\t\t\tconst featureName = this.adapter.device_features.getFirmwareFeature(featureID);\n\n\t\t\t\t\t\t\t// Dynamically process robot features by ID if they are supported\n\t\t\t\t\t\t\tif (typeof this.adapter.device_features[featureName] === \"function\") {\n\t\t\t\t\t\t\t\tthis.adapter.device_features[featureName](duid);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.adapter.ensureState(objectString, { val: featureName, ack: true });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"get_server_timer\":\n\t\t\t\t\t\t// if (typeof(attribute_val[0]) == \"object\") {\n\t\t\t\t\t\t// attribute_val[0] = JSON.stringify(attribute_val[0]);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// this.adapter.setStateAsync(\"Devices.\" + duid + \".\" + targetFolder + \".\" + mode, { val: attribute_val[0], ack: true });\n\t\t\t\t\t\t// Handle get_server_timer if needed\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"get_timer\":\n\t\t\t\t\t\t// if (typeof(attribute_val[0]) == \"object\") {\n\t\t\t\t\t\t// attribute_val[0] = JSON.stringify(attribute_val[0]);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// this.adapter.setStateAsync(\"Devices.\" + duid + \".\" + targetFolder + \".\" + mode, { val: attribute_val[0], ack: true });\n\t\t\t\t\t\t// Handle get_timer if needed\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"get_photo\":\n\t\t\t\t\t\tif (this.isGZIP(value)) {\n\t\t\t\t\t\t\tthis.adapter.log.debug(`gzipped photo found.`);\n\t\t\t\t\t\t\tthis.adapter.log.debug(JSON.stringify(value));\n\n\t\t\t\t\t\t\tthis.unzipBuffer(value, (error, photoData) => {\n\t\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t\tthis.adapter.catchError(error, \"get_photo\", duid);\n\n\t\t\t\t\t\t\t\t\tif (this.adapter.supportsFeature && this.adapter.supportsFeature(\"PLUGINS\")) {\n\t\t\t\t\t\t\t\t\t\tif (this.adapter.sentryInstance) {\n\t\t\t\t\t\t\t\t\t\t\tthis.adapter.sentryInstance.getSentryObject().captureException(`Failed to extract gzip: ${JSON.stringify(error)}`);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconst extractedPhoto = this.extractPhoto(photoData);\n\n\t\t\t\t\t\t\t\t\tif (extractedPhoto) {\n\t\t\t\t\t\t\t\t\t\tconst photo: any = {};\n\t\t\t\t\t\t\t\t\t\tphoto.duid = duid;\n\t\t\t\t\t\t\t\t\t\tphoto.command = \"get_photo\";\n\t\t\t\t\t\t\t\t\t\tphoto.image = `data:image/jpeg;base64,${extractedPhoto.toString(\"base64\")}`;\n\n\t\t\t\t\t\t\t\t\t\tif (this.adapter.socket) {\n\t\t\t\t\t\t\t\t\t\t\tthis.adapter.socket.send(JSON.stringify(photo));\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"get_dust_collection_switch_status\":\n\t\t\t\t\tcase \"get_wash_towel_mode\":\n\t\t\t\t\tcase \"get_smart_wash_params\":\n\t\t\t\t\tcase \"get_dust_collection_mode\": {\n\t\t\t\t\t\t// this currently isn't used anyhwere. Check this later at some point\n\t\t\t\t\t\tconst attribute_val = JSON.stringify(value);\n\t\t\t\t\t\tthis.adapter.setStateAsync(`Devices.${duid}.commands.${parameter.replace(\"get\", \"set\")}`, { val: attribute_val, ack: true });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase \"app_get_dryer_setting\": {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tvalue &&\n\t\t\t\t\t\t\ttypeof value === \"object\" &&\n\t\t\t\t\t\t\t\"on\" in value &&\n\t\t\t\t\t\t\tvalue.on &&\n\t\t\t\t\t\t\ttypeof value.on === \"object\" &&\n\t\t\t\t\t\t\t\"dry_time\" in value.on &&\n\t\t\t\t\t\t\t\"status\" in value\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst actualVal = JSON.stringify({ on: { dry_time: value.on.dry_time }, status: value.status });\n\t\t\t\t\t\t\tthis.adapter.setStateAsync(`Devices.${duid}.commands.${parameter.replace(\"get\", \"set\")}`, { val: actualVal, ack: true });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.adapter.log.warn(`Unexpected value structure for ${parameter}: ${JSON.stringify(value)}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tif (parameterFolders[parameter]) {\n\t\t\t\t\t\t\tmode = parameter.substring(4);\n\t\t\t\t\t\t\t// const attribute_val = await this.sendRequest(duid, parameter, []);\n\n\t\t\t\t\t\t\tif (typeof value[0] == \"object\") {\n\t\t\t\t\t\t\t\tvalue[0] = JSON.stringify(value[0]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst targetFolder = parameterFolders[parameter];\n\t\t\t\t\t\t\tthis.adapter.ensureState(`Devices.${duid}.${targetFolder}.${mode}`, { val: value[0], ack: true });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Unknown parameter\n\t\t\t\t\t\t\t// const unknown_parameter_val = await this.sendRequest(duid, parameter, []);\n\n\t\t\t\t\t\t\t// this.adapter.setStateAsync(\"Devices.\" + duid + \".\" + targetFolder + \".\" + mode, { val: attribute_val[0], ack: true });\n\t\t\t\t\t\t\tif (typeof value == \"object\") {\n\t\t\t\t\t\t\t\tif (typeof value[0] != \"number\") {\n\t\t\t\t\t\t\t\t\tthis.adapter.catchError(`Unknown parameter: ${JSON.stringify(value)}`, parameter, duid);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.adapter.catchError(`Unknown parameter: ${value}`, parameter, duid);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tthis.adapter.catchError(error, parameter, duid);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * @param {string} duid\n\t * @param {string} parameter\n\t * @param {string | number | Array | Object} [value]\n\t */\n\tasync command(duid, parameter, value) {\n\t\ttry {\n\t\t\tswitch (parameter) {\n\t\t\t\tcase \"load_multi_map\": {\n\t\t\t\t\tconst result = await this.sendRequest(duid, \"load_multi_map\", value);\n\n\t\t\t\t\tif (Array.isArray(result) && result[0] == \"ok\") {\n\t\t\t\t\t\tawait this.getMap(duid).then(async () => {\n\t\t\t\t\t\t\tawait this.getParameter(duid, \"get_room_mapping\", []);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"app_segment_clean\": {\n\t\t\t\t\tthis.adapter.log.debug(\"Starting room cleaning\");\n\n\t\t\t\t\tconst roomList: { segments: any[] } = { segments: [] };\n\t\t\t\t\tconst roomFloor = await this.adapter.getStateAsync(`Devices.${duid}.deviceStatus.map_status`);\n\t\t\t\t\tconst mappedRoomList = await this.sendRequest(duid, \"get_room_mapping\", []);\n\n\t\t\t\t\tif (mappedRoomList) {\n\t\t\t\t\t\tfor (const mappedRoom in mappedRoomList) {\n\t\t\t\t\t\t\tconst roomState = await this.adapter.getStateAsync(`Devices.${duid}.floors.${roomFloor.val}.${mappedRoomList[mappedRoom][0]}`);\n\n\t\t\t\t\t\t\tif (roomState.val) {\n\t\t\t\t\t\t\t\troomList.segments.push(mappedRoomList[mappedRoom][0]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cleanCount = await this.adapter.getStateAsync(`Devices.${duid}.floors.cleanCount`);\n\t\t\t\t\troomList[\"repeat\"] = cleanCount.val;\n\n\t\t\t\t\tconst result = await this.sendRequest(duid, \"app_segment_clean\", [roomList]);\n\t\t\t\t\tthis.adapter.log.debug(`app_segment_clean with roomIDs: ${JSON.stringify(roomList)} result: ${result}`);\n\t\t\t\t\tthis.adapter.setStateAsync(`Devices.${duid}.floors.cleanCount`, { val: 1, ack: true });\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"reset_consumable\":\n\t\t\t\t\tawait this.sendRequest(duid, parameter, [value]);\n\t\t\t\t\tthis.adapter.log.info(`Consumable ${parameter} successfully reset.`);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"app_set_dryer_status\": {\n\t\t\t\t\tconst result = await this.sendRequest(duid, parameter, JSON.parse(value));\n\t\t\t\t\tthis.adapter.log.debug(`Command: ${parameter} result: ${result}`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"app_goto_target\":\n\t\t\t\tcase \"app_zoned_clean\": {\n\t\t\t\t\tconst result = await this.sendRequest(duid, parameter, value);\n\t\t\t\t\tthis.adapter.log.debug(`Command: ${parameter} with value: ${JSON.stringify(value)} result: ${result}`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase \"set_water_box_distance_off\": {\n\t\t\t\t\tconst mappedValue = ((value - 1) / (30 - 1)) * (60 - 205) + 205;\n\t\t\t\t\tconst parameterValue = { distance_off: mappedValue };\n\n\t\t\t\t\tconst result = await this.sendRequest(duid, parameter, parameterValue);\n\t\t\t\t\tthis.adapter.log.debug(`Command: ${parameter} with value: ${JSON.stringify(parameterValue)} result: ${result}`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tif (value && typeof value !== \"boolean\") {\n\t\t\t\t\t\tconst valueType = typeof value;\n\n\t\t\t\t\t\tif (valueType === \"string\") {\n\t\t\t\t\t\t\tvalue = await JSON.parse(value);\n\t\t\t\t\t\t} else if (valueType === \"number\") {\n\t\t\t\t\t\t\tvalue = [value];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Wait for the command to finish before updating device configuration\n\t\t\t\t\t\tconst result = await this.sendRequest(duid, parameter, value);\n\t\t\t\t\t\tthis.adapter.log.debug(`Command: ${parameter} with value: ${JSON.stringify(value)} result: ${result}`);\n\n\t\t\t\t\t\t// Update states instantly after sending a command\n\t\t\t\t\t\tconst getCommand = parameter.replace(\"set\", \"get\");\n\t\t\t\t\t\tawait this.getParameter(duid, getCommand, []);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst result = await this.sendRequest(duid, parameter, undefined);\n\t\t\t\t\t\tthis.adapter.log.debug(`Command: ${parameter} result: ${result}`);\n\t\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.adapter.catchError(error, parameter, duid);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} duid\n\t */\n\tasync getMap(duid) {\n\t\tif (this.adapter.config.enable_map_creation) {\n\t\t\tthis.adapter.log.debug(`Requesting new map for ${duid}`);\n\n\t\t\ttry {\n\t\t\t\tconst map = await this.sendRequest(duid, \"get_map_v1\", []);\n\t\t\t\tif (map != \"retry\" && map != \"locating\") {\n\t\t\t\t\tconst mappedRooms = await this.sendRequest(duid, \"get_room_mapping\", []);\n\n\t\t\t\t\t// For testing and debugging maps; this cannot be stored in a state.\n\t\t\t\t\tzlib.gzip(map as Buffer, (error, buffer) => {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\tthis.adapter.log.error(`Error compressing map to gz ${error}`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfs.writeFile(\"./test.rrmap.gz\", buffer, (error) => {\n\t\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\t\tthis.adapter.log.error(`Error writing map file ${error}`);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tconst parsedData = await this.mapParser.parsedata(map as Buffer);\n\t\t\t\t\tconst selectedMap = this.getSelectedMap(duid);\n\t\t\t\t\tif (selectedMap != null) {\n\t\t\t\t\t\tthis.adapter.log.debug(`Generating map for selected map ${selectedMap} for duid ${duid}`); // never remove this log, it is very useful for debugging like room naming issues\n\t\t\t\t\t\tconst [mapBase64, mapBase64Truncated] = await this.mapCreator.canvasMap(parsedData, {selectedMap: selectedMap, mappedRooms: mappedRooms});\n\n\t\t\t\t\t\tawait this.adapter.ensureState(`Devices.${duid}.map.mapData`, { val: JSON.stringify(parsedData), ack: true });\n\t\t\t\t\t\tawait this.adapter.ensureState(`Devices.${duid}.map.mapBase64`, { val: mapBase64, ack: true });\n\t\t\t\t\t\tawait this.adapter.ensureState(`Devices.${duid}.map.mapBase64Truncated`, { val: mapBase64Truncated, ack: true });\n\n\t\t\t\t\t\t// Send current map with scale factor\n\t\t\t\t\t\tconst mapToSend = {\n\t\t\t\t\t\t\tduid: duid,\n\t\t\t\t\t\t\tcommand: \"map\",\n\t\t\t\t\t\t\tbase64: mapBase64,\n\t\t\t\t\t\t\tmap: parsedData,\n\t\t\t\t\t\t\tscale: this.adapter.config.map_scale,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (this.adapter.socket != null) {\n\t\t\t\t\t\t\tthis.adapter.socket.send(JSON.stringify(mapToSend));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.adapter.catchError(error, \"get_map_v1\", duid);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} duid\n\t */\n\tisCleaning(duid) {\n\t\tif (!duid) {\n\t\t\tthis.adapter.log.error(\"duid parameter missing on function isCleaning\");\n\t\t\treturn false;\n\t\t}\n\t\tif (!this.cached_get_status_value[duid]) {\n\t\t\tthis.adapter.log.error(`isCleaning: this.cached_get_status_value for ${duid} is not initialized. Request get_status first. this.cached_get_status_value: ${JSON.stringify({ ...this.cached_get_status_value })}`);\n\t\t\treturn false;\n\t\t}\n\n\t\tconst cleaningState = this.cached_get_status_value[duid].state;\n\n\t\tswitch (cleaningState) {\n\t\t\tcase 4: // Remote Control\n\t\t\tcase 5: // Cleaning\n\t\t\tcase 6: // Returning Dock\n\t\t\tcase 7: // Manual Mode\n\t\t\tcase 11: // Spot Cleaning\n\t\t\tcase 15: // Docking\n\t\t\tcase 16: // Go To\n\t\t\tcase 17: // Zone Clean\n\t\t\tcase 18: // Room Clean\n\t\t\tcase 26: // Going to wash the mop\n\t\t\t\treturn true;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} duid\n\t */\n\tgetSelectedMap(duid) {\n\t\tif (!duid) {\n\t\t\tthis.adapter.log.error(\"duid parameter missing on function getSelectedMap\");\n\t\t\treturn null;\n\t\t}\n\t\tif (!this.cached_get_status_value[duid]) {\n\t\t\tthis.adapter.log.error(\n\t\t\t\t`getSelectedMap: this.cached_get_status_value for ${duid} is not initialized. Request get_status first. this.cached_get_status_value: ${JSON.stringify({...this.cached_get_status_value})}`\n\t\t\t);\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.cached_get_status_value[duid].map_status >> 2; // Bitwise right shift to obtain the selected map\n\t}\n\n\n\t/**\n\t * @param {string} duid\n\t * @param {string} method\n\t * @param {Array | Object} [params]\n\t */\n\tasync sendRequest(duid, method, params) {\n\t\tconst remoteConnection = await this.isCloudDevice(duid);\n\t\tlet protocol = 101;\n\t\tconst version = await this.adapter.getDeviceProtocolVersion(duid);\n\n\t\tthis.idCounter = this.idCounter > 9999 ? 1 : this.idCounter + 1;\n\t\tconst messageID = method === \"get_photo\" ? ((this.idCounter - 1) % 256) + 1 : this.idCounter;\n\n\t\tconst timestamp = Math.floor(Date.now() / 1000);\n\n\t\t// if (!remoteConnection && method != \"get_map_v1\" && method != \"get_clean_record_map\" && method != \"get_network_info\") {\n\t\t// \tprotocol = 4;\n\t\t// }\n\n\t\tconst payload = await this.messageParser.buildPayload(duid, protocol, messageID, method, params);\n\t\tconst roborockMessage = await this.messageParser.buildRoborockMessage(duid, protocol, timestamp, payload);\n\n\t\tconst mqttConnectionState = this.adapter.mqtt_api.isConnected();\n\t\tconst localConnectionState = this.adapter.local_api.isConnected(duid);\n\n\t\tif (!roborockMessage) {\n\t\t\tthis.adapter.catchError(\"Failed to build buildRoborockMessage!\", \"function sendRequest\", duid);\n\t\t\treturn Promise.reject(\"Failed to build buildRoborockMessage!\");\n\t\t}\n\n\t\tif (version == \"A01\") {\n\t\t\tthis.adapter.mqtt_api.sendMessage(duid, roborockMessage);\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tthis.adapter.log.debug(`duid: ${duid}, mqttConnectionState: ${mqttConnectionState}, localConnectionState: ${localConnectionState}, remoteConnection: ${remoteConnection}`);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (!mqttConnectionState && remoteConnection) {\n\t\t\t\tthis.adapter.pendingRequests.delete(messageID);\n\t\t\t\tthis.adapter.log.debug(`Cloud connection not available. Not sending for method ${method} request!`);\n\t\t\t\treturn reject();\n\t\t\t} else if (!localConnectionState && !remoteConnection && method != \"get_network_info\") {\n\t\t\t\tthis.adapter.pendingRequests.delete(messageID);\n\t\t\t\tthis.adapter.log.debug(`Adapter locally or remotely not connected to robot ${duid}. Sending request for ${method} not possible!`);\n\t\t\t\treturn reject();\n\t\t\t} else {\n\t\t\t\t// Setup timeout for the request\n\t\t\t\tconst timeout = this.adapter.setTimeout(() => {\n\t\t\t\t\tthis.adapter.pendingRequests.delete(messageID);\n\t\t\t\t\tthis.adapter.local_api.clearChunkBuffer(duid);\n\t\t\t\t\tif (remoteConnection) {\n\t\t\t\t\t\treject(new Error(`Cloud request with id ${messageID} and method ${method} timed out after 30 seconds. MQTT connection state: ${mqttConnectionState}`));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(new Error(`Local request with id ${messageID} and method ${method} timed out after 30 seconds. Local connection state: ${localConnectionState}`));\n\t\t\t\t\t}\n\t\t\t\t}, requestTimeout);\n\n\t\t\t\t// Store the request with resolve and reject functions\n\t\t\t\tthis.adapter.pendingRequests.set(messageID, { resolve, reject, timeout });\n\n\t\t\t\tif (remoteConnection || method == \"get_map_v1\" || method == \"get_clean_record_map\" || method == \"get_photo\" || method == \"get_network_info\") {\n\t\t\t\t\tthis.adapter.mqtt_api.sendMessage(duid, roborockMessage);\n\t\t\t\t\tthis.adapter.log.debug(`Sent payload for ${duid} with ${payload} using cloud connection using version ${version}`);\n\t\t\t\t} else {\n\t\t\t\t\tconst lengthBuffer = Buffer.alloc(4);\n\t\t\t\t\tlengthBuffer.writeUInt32BE(roborockMessage.length, 0);\n\n\t\t\t\t\tconst fullMessage = Buffer.concat([lengthBuffer, roborockMessage]);\n\t\t\t\t\tthis.adapter.local_api.sendMessage(duid, fullMessage);\n\t\t\t\t\tthis.adapter.log.debug(`Sent payload for ${duid} with ${payload} using local connection using version ${version}`);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Resolves a previously tracked pending request by ID.\n\t * Removes the request from the internal map and calls its resolve function.\n\t * Throws an error if no matching request is found.\n\t *\n\t * @param {string|number} id - The unique identifier of the pending request to resolve.\n\t * @param {*} result - The result value to pass to the resolve function.\n\t * @param {number} protocol - The protocol number associated with this request, used for error context.\n\t * @throws {Error} If no pending request with the given ID exists.\n\t */\n\tresolvePendingRequest(id, result, protocol) {\n\t\tconst entry = this.adapter.pendingRequests?.get(id);\n\t\t// if (!entry) {\n\t\t// \tthrow new Error(`No pending request found for id ${id} (protocol: ${protocol})`);\n\t\t// }\n\t\tif (entry) {\n\t\t\tclearTimeout(entry.timeout);\n\t\t\tthis.adapter.pendingRequests.delete(id);\n\t\t\tentry.resolve(result);\n\t\t\tthis.adapter.log.debug(`Successfully resolved request id ${id} using protocol: ${protocol}. Size of message queue: ${this.adapter.pendingRequests.size}`);\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} duid\n\t */\n\tasync isCloudDevice(duid) {\n\t\tconst receivedDevices = this.adapter.http_api.getReceivedDevices();\n\n\t\tconst sharedDevice = receivedDevices.find((device) => device.duid == duid);\n\t\tconst cloudDevice = this.adapter.local_api.cloudDevices.has(duid);\n\n\t\tif (sharedDevice || cloudDevice) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * @param {string} duid\n\t */\n\tasync getConnector(duid) {\n\t\tconst isRemote = await this.isCloudDevice(duid);\n\n\t\tif (isRemote) {\n\t\t\treturn this.adapter.mqtt_api;\n\t\t} else {\n\t\t\treturn this.adapter.local_api;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} attribute\n\t * @param {number} value\n\t */\n\tcalculateCleaningValue(attribute, value) {\n\t\tswitch (attribute) {\n\t\t\tcase \"clean_time\":\n\t\t\t\treturn Math.round(value / 60 / 60);\n\t\t\tcase \"clean_area\":\n\t\t\t\treturn Number((value / 1000 / 1000).toFixed(2));\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} attribute\n\t * @param {number} value\n\t */\n\tcalculateRecordValue(attribute, value) {\n\t\tswitch (attribute) {\n\t\t\tcase \"begin\":\n\t\t\tcase \"end\":\n\t\t\t\treturn new Date(value * 1000).toString();\n\t\t\tcase \"duration\":\n\t\t\t\treturn Math.round(value / 60);\n\t\t\tcase \"area\":\n\t\t\tcase \"cleaned_area\":\n\t\t\t\treturn Number((value / 1000 / 1000).toFixed(2));\n\t\t\tdefault:\n\t\t\t\treturn value;\n\t\t}\n\t}\n\n\tunzipBuffer(buffer, callback) {\n\t\tzlib.gunzip(buffer, function (err, result) {\n\t\t\tif (err) {\n\t\t\t\tcallback(err);\n\t\t\t} else {\n\t\t\t\tcallback(null, result);\n\t\t\t}\n\t\t});\n\t}\n\n\tisGZIP(buffer) {\n\t\tif (buffer.length < 2) {\n\t\t\treturn false;\n\t\t}\n\t\tif (buffer[0] == 31 && buffer[1] == 139) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\textractPhoto(buffer) {\n\t\t// Verify that the buffer is long enough to hold the header\n\t\tif (buffer.length < 10) {\n\t\t\treturn false;\n\t\t}\n\t\t// Check the signature\n\t\tif (buffer[26] == 74 && buffer[27] == 70 && buffer[28] == 73 && buffer[29] == 70) {\n\t\t\treturn buffer.slice(20);\n\t\t} else if (buffer[42] == 74 && buffer[43] == 70 && buffer[44] == 73 && buffer[45] == 70) {\n\t\t\treturn buffer.slice(36);\n\t\t}\n\t\treturn false;\n\t}\n\n\tclearQueue() {\n\t\tthis.adapter.local_api.clearLocalDevicedTimeout();\n\t\tthis.adapter.mqtt_api.clearIntervals();\n\n\t\tthis.messageQueue.forEach(({ timeout102, timeout301 }) => {\n\t\t\tthis.adapter.clearTimeout(timeout102);\n\t\t\tif (timeout301) {\n\t\t\t\tthis.adapter.clearTimeout(timeout301);\n\t\t\t}\n\t\t});\n\n\t\t// Clear the messageQueue map\n\t\tthis.messageQueue.clear();\n\t}\n}\n"]}