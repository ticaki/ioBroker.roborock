{"version":3,"file":"RRMapParser.js","sourceRoot":"","sources":["../../src/lib/RRMapParser.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Roborock } from \"../main\";\r\n\r\nimport crypto from \"crypto\";\r\n\r\nconst TYPES = {\r\n\tCHARGER_LOCATION: 1,\r\n\tIMAGE: 2,\r\n\tPATH: 3,\r\n\tGOTO_PATH: 4,\r\n\tGOTO_PREDICTED_PATH: 5,\r\n\tCURRENTLY_CLEANED_ZONES: 6,\r\n\tGOTO_TARGET: 7,\r\n\tROBOT_POSITION: 8,\r\n\tFORBIDDEN_ZONES: 9,\r\n\tVIRTUAL_WALLS: 10,\r\n\tCURRENTLY_CLEANED_BLOCKS: 11,\r\n\tNO_MOP_ZONE: 12,\r\n\tOBSTACLES: 13,\r\n\tIGNORED_OBSTACLES: 14,\r\n\tOBSTACLES2: 15,\r\n\tIGNORED_OBSTACLES2: 16,\r\n\tCARPET_MAP: 17,\r\n\tMOP_PATH: 18,\r\n\tCARPET_FORBIDDEN_ZONE: 19,\r\n\tSMART_ZONE_PATH_TYPE: 20,\r\n\tSMART_ZONE: 21,\r\n\tCUSTOM_CARPET: 22,\r\n\tCL_FORBIDDEN_ZONES: 23,\r\n\tFLOOR_MAP: 24,\r\n\tFURNITURES: 25,\r\n\tDOCK_TYPE: 26,\r\n\tENEMIES: 27,\r\n\tDS_FORBIDDEN_ZONES: 28, // WTF IS DS???\r\n\tSTUCK_POINTS: 29, // not currently processed\r\n\tCLF_FORBIDDEN_ZONES: 30, // WTF IS CLF???\r\n\tSMART_DS: 31, // not currently processed\r\n\tFLOOR_DIRECTION: 32, // not 100% sure this FLOOR_DIRECTION but Roborock defined this as flDirec\r\n\tDATE: 33, // not currently processed\r\n\tNONCEDATA: 34,\r\n\tEXT_ZONES: 36, // not currently processed\r\n\tPATROL: 37, // not currently processed\r\n\tPET_PATROL: 38, // not currently processed\r\n\tMODE_CARPET: 39, // not currently processed\r\n\tSTROY_PT: 41, // not currently processed\r\n\tDIRTY_RECT: 42, // not currently processed\r\n\tIGNORE_DIRTY_RECT: 43, // not currently processed\r\n\tBRUSH_PT: 44, // not currently processed\r\n\tDIRTY_NEW: 45, // not currently processed\r\n\tMOP_ERR_PT: 46, // not currently processed\r\n\tERAZER_ZONE: 47, // not currently processed\r\n\tLONG_CARPET: 48, // not currently processed\r\n\tDS_SIDES: 49, // not currently processed\r\n\tSTEERING_PT: 50, // not currently processed\r\n\tSENSOR_INFO: 51, // not currently processed\r\n\tLOW_SPACES: 52, // not currently processed\r\n\tDIGEST: 1024,\r\n};\r\nconst TYPES_REVERSE = Object.fromEntries(Object.entries(TYPES).map(([key, value]) => [value, key]));\r\n\r\nconst OFFSETS = {\r\n\tHLENGTH: 0x02,\r\n\tLENGTH: 0x04,\r\n\tTYPE_COUNT: 0x08,\r\n\tTARGET_X: 0x08,\r\n\tANGLE: 0x10,\r\n\tPATH: 0x14,\r\n\tTARGET_Y: 0x0a,\r\n\tBLOCKS: 0x0c,\r\n};\r\n\r\nexport class RRMapParser {\r\n\tadapter: Roborock;\r\n\r\n\tconstructor(adapter: Roborock) {\r\n\t\tthis.adapter = adapter;\r\n\t}\r\n\r\n\tBytesToInt(buffer: Buffer, offset: number, len: number) {\r\n\t\treturn buffer.slice(offset, offset + len).reduce((acc, byte, i) => acc | (byte << (8 * i)), 0);\r\n\t}\r\n\r\n\tasync parsedata(buf: Buffer) {\r\n\t\tconst metaData = this.PARSE(buf);\r\n\t\tif (!metaData.map_index) {\r\n\t\t\tthis.adapter.log.error(`RRMapParser: Failed to parse map data. map_index was missing`);\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\tif (metaData.SHA1 != metaData.expectedSHA1) {\r\n\t\t\tthis.adapter.log.error(`Invalid map hash!`);\r\n\t\t\treturn {};\r\n\t\t}\r\n\r\n\t\tlet dataPosition = 0x14; // Skip header\r\n\r\n\t\tconst result = { metaData };\r\n\r\n\t\twhile (dataPosition < metaData.data_length) {\r\n\t\t\tconst type = buf.readUInt16LE(dataPosition);\r\n\t\t\tconst hlength = buf.readUInt16LE(dataPosition + OFFSETS.HLENGTH);\r\n\t\t\tconst length = buf.readUInt32LE(dataPosition + OFFSETS.LENGTH);\r\n\r\n\t\t\tconst blockBuffer = buf.slice(dataPosition, dataPosition + hlength + length);\r\n\t\t\tconst [offset1, offset2] = this.getTwoByteOffsets(blockBuffer);\r\n\r\n\t\t\t// this.adapter.log.debug(\"Known values: type=\" + type + \", hlength=\" + hlength + \", length=\" + length);\r\n\r\n\t\t\tif (TYPES_REVERSE[type]) {\r\n\t\t\t\t// this.adapter.log.debug(\"Test length: \" + TYPES_REVERSE[type] + \" \" + length);\r\n\t\t\t\t// if (length < 100) this.adapter.log.debug(\"Test data type: \" + TYPES_REVERSE[type] + \" \" + buf.toString(\"hex\", dataPosition, dataPosition + length));\r\n\r\n\t\t\t\t// this.adapter.log.warn(`Block type buffer data: ${TYPES_REVERSE[type]} ${JSON.stringify(blockBuffer)}`);\r\n\t\t\t\t// this.adapter.log.warn(`Block type hex data: ${TYPES_REVERSE[type]} ${blockBuffer.toString(\"hex\")}`);\r\n\r\n\t\t\t\tswitch (type) {\r\n\t\t\t\t\tcase TYPES.ROBOT_POSITION:\r\n\t\t\t\t\tcase TYPES.CHARGER_LOCATION: {\r\n\t\t\t\t\t\tconst position = this.getXYPositions(blockBuffer, offset1, offset2);\r\n\t\t\t\t\t\tconst angle = length >= 12 ? this.getAngle(blockBuffer) : 0; // gen3+\r\n\r\n\t\t\t\t\t\tresult[TYPES_REVERSE[type]] = {\r\n\t\t\t\t\t\t\tposition,\r\n\t\t\t\t\t\t\tangle,\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase TYPES.IMAGE: {\r\n\t\t\t\t\t\tconst offset = this.getSingleByteOffset(blockBuffer);\r\n\t\t\t\t\t\tconst [left, top, width, height] = this.getMapSizes(blockBuffer, offset1);\r\n\r\n\t\t\t\t\t\tlet parameters: any = {};\r\n\t\t\t\t\t\tparameters = {\r\n\t\t\t\t\t\t\tsegments: {\r\n\t\t\t\t\t\t\t\tcount: hlength > 24 ? this.getCount(blockBuffer) : 0,\r\n\t\t\t\t\t\t\t\tid: [],\r\n\t\t\t\t\t\t\t\tlargestSegment: -1,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tposition: {\r\n\t\t\t\t\t\t\t\ttop: top,\r\n\t\t\t\t\t\t\t\tleft: left,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tdimensions: {\r\n\t\t\t\t\t\t\t\theight: height,\r\n\t\t\t\t\t\t\t\twidth: width,\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tpixels: {\r\n\t\t\t\t\t\t\t\tfloor: [],\r\n\t\t\t\t\t\t\t\tobstacle: [],\r\n\t\t\t\t\t\t\t\tsegments: [],\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tif (parameters.dimensions.height > 0 && parameters.dimensions.width > 0) {\r\n\t\t\t\t\t\t\tlet segmenetID = 0;\r\n\r\n\t\t\t\t\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\t\t\t\t\tconst pixelType = this.getPixelType(buf, dataPosition + i + offset1);\r\n\r\n\t\t\t\t\t\t\t\tif (pixelType == 1) {\r\n\t\t\t\t\t\t\t\t\t// Obstacle\r\n\t\t\t\t\t\t\t\t\tparameters.pixels.obstacle.push(i);\r\n\t\t\t\t\t\t\t\t} else if (pixelType != 0) {\r\n\t\t\t\t\t\t\t\t\t// Floor\r\n\t\t\t\t\t\t\t\t\tparameters.pixels.floor.push(i);\r\n\r\n\t\t\t\t\t\t\t\t\tsegmenetID = (buf.readUInt8(offset + dataPosition + i) & 248) >> 3;\r\n\t\t\t\t\t\t\t\t\tif (!parameters.segments.id.includes(segmenetID)) parameters.segments.id.push(segmenetID); // Add segment ID to array if it doesn't exist\r\n\r\n\t\t\t\t\t\t\t\t\tparameters.pixels.segments.push(i | (segmenetID << 21)); // Add segment ID to pixel\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlet maxPixels = 0;\r\n\t\t\t\t\t\tconst pixelCountBySegment = {};\r\n\r\n\t\t\t\t\t\tfor (const px of parameters.pixels.segments) {\r\n\t\t\t\t\t\t\tconst segnum = px >> 21;\r\n\t\t\t\t\t\t\tconst count = (pixelCountBySegment[segnum] = (pixelCountBySegment[segnum] || 0) + 1);\r\n\t\t\t\t\t\t\tif (count > maxPixels) {\r\n\t\t\t\t\t\t\t\tmaxPixels = count;\r\n\t\t\t\t\t\t\t\tparameters.segments.largestSegment = segnum;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tresult[TYPES_REVERSE[type]] = parameters;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase TYPES.CARPET_MAP: {\r\n\t\t\t\t\t\tresult[TYPES_REVERSE[type]] = [];\r\n\r\n\t\t\t\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\t\t\t\t// Only add the pixel index to the carpet array if it is a carpet pixel\r\n\t\t\t\t\t\t\tif (this.getPixelType(buf, dataPosition + i) == 1) {\r\n\t\t\t\t\t\t\t\tresult[TYPES_REVERSE[type]].push(i);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase TYPES.MOP_PATH: {\r\n\t\t\t\t\t\tresult[TYPES_REVERSE[type]] = [];\r\n\r\n\t\t\t\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\t\t\t\tresult[TYPES_REVERSE[type]].push(...this.readUInt8(buf, dataPosition + i, OFFSETS.PATH, 1));\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase TYPES.PATH:\r\n\t\t\t\t\tcase TYPES.GOTO_PATH:\r\n\t\t\t\t\tcase TYPES.GOTO_PREDICTED_PATH: {\r\n\t\t\t\t\t\tconst pathType = TYPES_REVERSE[type];\r\n\t\t\t\t\t\tresult[pathType] = {\r\n\t\t\t\t\t\t\tcurrent_angle: this.getAngle(blockBuffer),\r\n\t\t\t\t\t\t\tpoints: [],\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tfor (let i = 0; i < length; i = i + 4) {\r\n\t\t\t\t\t\t\tresult[pathType].points.push(this.getPointInPath(buf, dataPosition + i));\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (result[pathType].points.length >= 2) {\r\n\t\t\t\t\t\t\tconst lastPoint = result[pathType].points[result[pathType].points.length - 1];\r\n\t\t\t\t\t\t\tconst secondLastPoint = result[pathType].points[result[pathType].points.length - 2];\r\n\r\n\t\t\t\t\t\t\tresult[pathType].current_angle =\r\n\t\t\t\t\t\t\t\t(Math.atan2(\r\n\t\t\t\t\t\t\t\t\t// Calculate the angle between the last two points\r\n\t\t\t\t\t\t\t\t\tlastPoint[1] - secondLastPoint[1],\r\n\t\t\t\t\t\t\t\t\tlastPoint[0] - secondLastPoint[0]\r\n\t\t\t\t\t\t\t\t) *\r\n\t\t\t\t\t\t\t\t\t180) /\r\n\t\t\t\t\t\t\t\tMath.PI;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcase TYPES.GOTO_TARGET:\r\n\t\t\t\t\t\tresult[TYPES_REVERSE[type]] = this.getGoToTarget(blockBuffer);\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase TYPES.CURRENTLY_CLEANED_ZONES:\r\n\t\t\t\t\tcase TYPES.VIRTUAL_WALLS: {\r\n\t\t\t\t\t\tconst wallCount = buf.readUInt32LE(0x08 + dataPosition);\r\n\t\t\t\t\t\tresult[TYPES_REVERSE[type]] = [];\r\n\r\n\t\t\t\t\t\tfor (let i = 0; i < wallCount; i++) {\r\n\t\t\t\t\t\t\tconst wallDataPosition = dataPosition + i * 8; // 8 Bytes pro Wand\r\n\t\t\t\t\t\t\tresult[TYPES_REVERSE[type]].push(this.readUInt16LE(buf, wallDataPosition, offset1, 4));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase TYPES.FORBIDDEN_ZONES:\r\n\t\t\t\t\tcase TYPES.NO_MOP_ZONE:\r\n\t\t\t\t\tcase TYPES.CARPET_FORBIDDEN_ZONE:\r\n\t\t\t\t\tcase TYPES.DS_FORBIDDEN_ZONES:\r\n\t\t\t\t\tcase TYPES.CLF_FORBIDDEN_ZONES:\r\n\t\t\t\t\tcase TYPES.MODE_CARPET: {\r\n\t\t\t\t\t\tconst zoneCount = this.getCount(blockBuffer);\r\n\t\t\t\t\t\tresult[TYPES_REVERSE[type]] = [];\r\n\t\t\t\t\t\tfor (let i = 0; i < zoneCount; i++) {\r\n\t\t\t\t\t\t\tconst zoneDataPosition = dataPosition + i * 16; // 16 Bytes pro Zone\r\n\t\t\t\t\t\t\tresult[TYPES_REVERSE[type]].push(this.getForbiddenZone(buf, zoneDataPosition, offset1));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase TYPES.OBSTACLES2:\r\n\t\t\t\t\t\tresult[TYPES_REVERSE[type]] = this.extractObstacles(blockBuffer, offset1);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase TYPES.CURRENTLY_CLEANED_BLOCKS: {\r\n\t\t\t\t\t\tconst blockCount = this.getCount(blockBuffer);\r\n\t\t\t\t\t\tresult[TYPES_REVERSE[type]] = [];\r\n\r\n\t\t\t\t\t\tfor (let i = 0; i < blockCount; i++) {\r\n\t\t\t\t\t\t\tresult[TYPES_REVERSE[type]].push(buf.readUInt8(OFFSETS.BLOCKS + dataPosition + i));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcase TYPES.NONCEDATA:\r\n\t\t\t\t\t\tresult[TYPES_REVERSE[type]] = this.getNonceData(blockBuffer);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.adapter.log.warn(`Unknown block type! Please report this to the developer. Block type is: ${type} and a length of ${length}`);\r\n\t\t\t\tthis.adapter.log.warn(`Unknown block type hex data: ${TYPES_REVERSE[type]} ${blockBuffer.toString(\"hex\")}`);\r\n\t\t\t\tthis.adapter.log.warn(`Unknown block type buffer data: ${TYPES_REVERSE[type]} ${JSON.stringify(blockBuffer)}`);\r\n\t\t\t}\r\n\t\t\tdataPosition = dataPosition + length + hlength;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param mapBuf {Buffer} Should contain map in RRMap Format\r\n\t * @return {object}\r\n\t */\r\n\tPARSE(mapBuf) {\r\n\t\tif (mapBuf && mapBuf[0x00] === 0x72 && mapBuf[0x01] === 0x72) {\r\n\t\t\treturn {\r\n\t\t\t\theader_length: mapBuf.readUInt16LE(OFFSETS.HLENGTH),\r\n\t\t\t\tdata_length: mapBuf.readUInt32LE(OFFSETS.LENGTH),\r\n\t\t\t\tversion: {\r\n\t\t\t\t\tmajor: mapBuf.readUInt16LE(0x08),\r\n\t\t\t\t\tminor: mapBuf.readUInt16LE(0x0a),\r\n\t\t\t\t},\r\n\t\t\t\tmap_index: mapBuf.readUInt32LE(0x0c),\r\n\t\t\t\tmap_sequence: mapBuf.readUInt32LE(0x10),\r\n\t\t\t\tSHA1: crypto\r\n\t\t\t\t\t.createHash(\"sha1\")\r\n\t\t\t\t\t.update(Uint8Array.prototype.slice.call(mapBuf, 0, mapBuf.length - 20))\r\n\t\t\t\t\t.digest(\"hex\"),\r\n\t\t\t\texpectedSHA1: Buffer.from(Uint8Array.prototype.slice.call(mapBuf, mapBuf.length - 20)).toString(\"hex\"),\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\treturn {};\r\n\t\t}\r\n\t}\r\n\r\n\textractObstacles(buf: Buffer, offset: number) {\r\n\t\tconst obstacleCount = this.getCount(buf);\r\n\t\tconst obstacles: any[] = [];\r\n\r\n\t\tfor (let i = 0; i < obstacleCount * 28; i += 28) {\r\n\t\t\tconst obstacle = [\r\n\t\t\t\tbuf.readUInt16LE(offset + i), // x\r\n\t\t\t\tbuf.readUInt16LE(offset + i + 2), // y\r\n\t\t\t\tbuf.readUInt16LE(offset + i + 4), // obstacle type\r\n\t\t\t\tbuf.readUInt16LE(offset + i + 6), // confidence level\r\n\t\t\t\tbuf.readUInt16LE(offset + i + 8), // unknown\r\n\t\t\t\tbuf.readUInt16LE(offset + i + 10), // unknown\r\n\t\t\t\tbuf.toString(\"utf-8\", offset + i + 12, offset + i + 12 + 16), // photo id\r\n\t\t\t];\r\n\t\t\tobstacles.push(obstacle);\r\n\t\t}\r\n\r\n\t\treturn obstacles;\r\n\t}\r\n\r\n\tgetXYPositions(buf, xOffset, yOffset) {\r\n\t\tconst xPosition = buf.readInt32LE(xOffset);\r\n\t\tconst yPosition = buf.readInt32LE(yOffset);\r\n\r\n\t\treturn [xPosition, yPosition];\r\n\t}\r\n\r\n\tgetMapSizes(buf, offset) {\r\n\t\tconst top = buf.readInt32LE(offset - 0x10);\r\n\t\tconst left = buf.readInt32LE(offset - 0x0c);\r\n\t\tconst height = buf.readInt32LE(offset - 0x08);\r\n\t\tconst width = buf.readInt32LE(offset - 0x04);\r\n\r\n\t\treturn [left, top, width, height];\r\n\t}\r\n\r\n\tgetPointInPath(buf: Buffer, dataPosition: number) {\r\n\t\tconst result: number[] = [];\r\n\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\tresult.push(buf.readUInt16LE(dataPosition + OFFSETS.PATH + i * 2));\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tgetCount(buf) {\r\n\t\treturn buf.readUInt32LE(OFFSETS.TYPE_COUNT);\r\n\t}\r\n\r\n\tgetPixelType(buf, dataPosition) {\r\n\t\t// Get the pixel type with bitwise AND operation of 0x07\r\n\t\treturn buf.readUInt8(dataPosition) & 0x07;\r\n\t}\r\n\r\n\tgetAngle(buf) {\r\n\t\treturn buf.readInt32LE(OFFSETS.ANGLE);\r\n\t}\r\n\r\n\tgetGoToTarget(buf) {\r\n\t\treturn [buf.readUInt16LE(OFFSETS.TARGET_X), buf.readUInt16LE(OFFSETS.TARGET_Y)];\r\n\t}\r\n\r\n\tgetForbiddenZone(buf, dataPosition, offset) {\r\n\t\treturn this.readUInt16LE(buf, dataPosition, offset, 8);\r\n\t}\r\n\r\n\tgetSingleByteOffset(buf) {\r\n\t\treturn buf.readUInt8(2);\r\n\t}\r\n\r\n\tgetTwoByteOffsets(buf) {\r\n\t\treturn [buf.readUInt8(2), buf.readUInt8(4)];\r\n\t}\r\n\r\n\tgetDatatype(buf, offset) {\r\n\t\t// Get the first byte of the block\r\n\t\tconst byte = buf[offset];\r\n\r\n\t\t// Check the byte value\r\n\t\tif (byte >= 0x00 && byte <= 0xff) {\r\n\t\t\t// It's an unsigned byte\r\n\t\t\treturn \"UInt8\";\r\n\t\t} else if (byte >= 0x00 && byte <= 0xffff) {\r\n\t\t\t// It's an unsigned 16-bit little-endian integer\r\n\t\t\treturn \"UInt16LE\";\r\n\t\t} else if (byte >= 0x00 && byte <= 0xffffffff) {\r\n\t\t\t// It's an unsigned 32-bit little-endian integer\r\n\t\t\treturn \"UInt32LE\";\r\n\t\t} else {\r\n\t\t\t// It's an unknown type\r\n\t\t\treturn \"Unknown\";\r\n\t\t}\r\n\t}\r\n\r\n\tgetNonceData(buf: Buffer): { type: number; unixTime: number }[] {\r\n\t\tconst sections: { type: number; unixTime: number }[] = [];\r\n\r\n\t\tfor (let i = 12; i < buf.length; i += 5) {\r\n\t\t\tconst type = buf[i];\r\n\t\t\tconst unixTime = buf.readUInt32LE(i + 1);\r\n\r\n\t\t\tsections.push({ type, unixTime });\r\n\t\t}\r\n\r\n\t\treturn sections;\r\n\t}\r\n\r\n\r\n\treadUInt16LE(buf: Buffer, dataPosition: number, offset: number, count: number) {\r\n\t\tconst result: number[] = [];\r\n\t\tfor (let j = 0; j < count; j++) {\r\n\t\t\tresult.push(buf.readUInt16LE(dataPosition + offset + j * 2));\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\treadInt32LE(buf: Buffer, dataPosition: number, offset: number, count: number) {\r\n\t\tconst array: number[] = [];\r\n\t\tfor (let j = 0; j < count; j++) {\r\n\t\t\tarray.push(buf.readInt32LE(offset + dataPosition + j * 4));\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\treadUInt32LE(buf: Buffer, dataPosition: number, offset: number, count: number) {\r\n\t\tconst array: number[] = [];\r\n\t\tfor (let j = 0; j < count; j++) {\r\n\t\t\tarray.push(buf.readUInt32LE(offset + dataPosition + j * 4));\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n\r\n\treadUInt8(buf: Buffer, dataPosition: number, offset: number, count: number) {\r\n\t\tconst array: number[] = [];\r\n\t\tfor (let j = 0; j < count; j++) {\r\n\t\t\tarray.push(buf.readUInt8(offset + dataPosition + j));\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n}"]}