{"version":3,"file":"cryptoEngine.js","sourceRoot":"","sources":["../../src/lib/cryptoEngine.ts"],"names":[],"mappings":"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","sourcesContent":["import crypto from \"crypto\";\nimport forge from \"node-forge\";\n\n// Salt from librrcodec.so (encrypted via com.roborock.iotsdk.appsecret)\nconst SALT = \"TXdfu$jyZ#TZHsg4\";\n\n// Lazy RSA keypair for e.g. get_photo\nlet rsaKeys: {\n    public: { n: string; e: string };\n    private: {\n        n: string;\n        e: string;\n        d: string;\n        p: string;\n        q: string;\n        dmp1: string;\n        dmq1: string;\n        coeff: string;\n    };\n} | null = null;\n\nfunction encodeTimestamp(ts: number): string {\n\tconst hex = ts.toString(16).padStart(8, \"0\").split(\"\");\n\treturn [5, 6, 3, 7, 1, 2, 0, 4].map((idx) => hex[idx]).join(\"\");\n}\n\nfunction md5bin(str: string): Buffer {\n\treturn crypto.createHash(\"md5\").update(str).digest();\n}\n\nfunction md5hex(str: string): string {\n\treturn crypto.createHash(\"md5\").update(str).digest(\"hex\");\n}\n\nfunction toBuffer(input: string | Buffer): Buffer {\n\treturn Buffer.isBuffer(input) ? input : Buffer.from(input, \"utf-8\");\n}\n\n// credits to rovo89 for the following code. Especially for version A01!\n// credits to Kenny from discord from the Homey project for the L01 implementation!\nexport const cryptoEngine = {\n    /**\n     * Generate RSA keypair only when needed.\n     */\n\tensureRsaKeys() {\n\t\tif (rsaKeys) return rsaKeys;\n\t\tconst kp = forge.pki.rsa.generateKeyPair(2048);\n\t\trsaKeys = {\n\t\t\tpublic: {\n\t\t\t\tn: kp.publicKey.n.toString(16),\n\t\t\t\te: kp.publicKey.e.toString(16),\n\t\t\t},\n\t\t\tprivate: {\n\t\t\t\tn: kp.privateKey.n.toString(16),\n\t\t\t\te: kp.privateKey.e.toString(16),\n\t\t\t\td: kp.privateKey.d.toString(16),\n\t\t\t\tp: kp.privateKey.p.toString(16),\n\t\t\t\tq: kp.privateKey.q.toString(16),\n\t\t\t\tdmp1: kp.privateKey.dP.toString(16),\n\t\t\t\tdmq1: kp.privateKey.dQ.toString(16),\n\t\t\t\tcoeff: kp.privateKey.qInv.toString(16),\n\t\t\t},\n\t\t};\n\t\treturn rsaKeys;\n\t},\n\n\t// ---------- V1 (AES-128-ECB) ----------\n\n\tencryptV1(payload: Buffer | string, localKey: string, ts: number): Buffer {\n\t\tconst key = md5bin(encodeTimestamp(ts) + localKey + SALT);\n\t\tconst cipher = crypto.createCipheriv(\"aes-128-ecb\", key, null);\n\t\treturn Buffer.concat([cipher.update(toBuffer(payload)), cipher.final()]);\n\t},\n\n\tdecryptV1(payload: Buffer, localKey: string, ts: number): Buffer {\n\t\tconst key = md5bin(encodeTimestamp(ts) + localKey + SALT);\n\t\tconst decipher = crypto.createDecipheriv(\"aes-128-ecb\", key, null);\n\t\treturn Buffer.concat([decipher.update(payload), decipher.final()]);\n\t},\n\n\t// ---------- A01 (AES-128-CBC) ----------\n\n\tencryptA01(payload: Buffer | string, localKey: string, random: number): Buffer {\n\t\tconst randomHex = (random >>> 0).toString(16).padStart(8, \"0\");\n\t\tconst ivHex = md5hex(randomHex + \"726f626f726f636b2d67a6d6da\").substring(8, 24);\n\n\t\tconst key = Buffer.from(localKey, \"utf-8\");\n\t\tconst iv = Buffer.from(ivHex, \"utf-8\");\n\t\tconst buf = toBuffer(payload);\n\n\t\t// PKCS7 Padding\n\t\tconst pad = 16 - (buf.length % 16);\n\t\tconst padded = Buffer.concat([buf, Buffer.alloc(pad, pad)]);\n\n\t\tconst cipher = crypto.createCipheriv(\"aes-128-cbc\", key, iv);\n\t\treturn Buffer.concat([cipher.update(padded), cipher.final()]);\n\t},\n\n\tdecryptA01(payload: Buffer, localKey: string, random: number): Buffer {\n\t\tconst randomHex = (random >>> 0).toString(16).padStart(8, \"0\");\n\t\tconst ivHex = md5hex(randomHex + \"726f626f726f636b2d67a6d6da\").substring(8, 24);\n\n\t\tconst key = Buffer.from(localKey, \"utf-8\");\n\t\tconst iv = Buffer.from(ivHex, \"utf-8\");\n\n\t\tconst decipher = crypto.createDecipheriv(\"aes-128-cbc\", key, iv);\n\t\treturn Buffer.concat([decipher.update(payload), decipher.final()]);\n\t},\n\n\t// ---------- L01 (AES-256-GCM) ----------\n\n\tencryptL01(payload: Buffer | string, localKey: string, ts: number, seq: number, random: number, connectNonce: number, ackNonce?: number): Buffer {\n\t\tif (!connectNonce || ackNonce == null) throw new Error(\"Missing nonces for L01\");\n\n\t\tconst key = crypto\n\t\t\t.createHash(\"sha256\")\n\t\t\t.update(encodeTimestamp(ts) + localKey + SALT)\n\t\t\t.digest();\n\n\t\tconst digestInput = Buffer.alloc(12);\n\t\tdigestInput.writeUInt32BE(seq >>> 0);\n\t\tdigestInput.writeUInt32BE(random >>> 0, 4);\n\t\tdigestInput.writeUInt32BE(ts >>> 0, 8);\n\t\tconst iv = crypto.createHash(\"sha256\").update(digestInput).digest().subarray(0, 12);\n\n\t\tconst aad = Buffer.alloc(20);\n\t\taad.writeUInt32BE(seq >>> 0);\n\t\taad.writeUInt32BE(connectNonce >>> 0, 4);\n\t\taad.writeUInt32BE(ackNonce >>> 0, 8);\n\t\taad.writeUInt32BE(random >>> 0, 12);\n\t\taad.writeUInt32BE(ts >>> 0, 16);\n\n\t\tconst cipher = crypto.createCipheriv(\"aes-256-gcm\", key, iv);\n\t\tcipher.setAAD(aad);\n\n\t\tconst buf = toBuffer(payload);\n\t\tconst ciphertext = Buffer.concat([cipher.update(buf), cipher.final()]);\n\t\tconst tag = cipher.getAuthTag();\n\n\t\treturn Buffer.concat([ciphertext, tag]);\n\t},\n\n\tdecryptL01(payload: Buffer, localKey: string, ts: number, seq: number, random: number, connectNonce: number, ackNonce?: number): Buffer {\n\t\tif (!connectNonce || ackNonce == null) throw new Error(\"Missing nonces for L01\");\n\n\t\tconst key = crypto\n\t\t\t.createHash(\"sha256\")\n\t\t\t.update(encodeTimestamp(ts) + localKey + SALT)\n\t\t\t.digest();\n\n\t\tconst digestInput = Buffer.alloc(12);\n\t\tdigestInput.writeUInt32BE(seq >>> 0);\n\t\tdigestInput.writeUInt32BE(random >>> 0, 4);\n\t\tdigestInput.writeUInt32BE(ts >>> 0, 8);\n\t\tconst iv = crypto.createHash(\"sha256\").update(digestInput).digest().subarray(0, 12);\n\n\t\tconst aad = Buffer.alloc(20);\n\t\taad.writeUInt32BE(seq >>> 0);\n\t\taad.writeUInt32BE(connectNonce >>> 0, 4);\n\t\taad.writeUInt32BE(ackNonce >>> 0, 8);\n\t\taad.writeUInt32BE(random >>> 0, 12);\n\t\taad.writeUInt32BE(ts >>> 0, 16);\n\n\t\tconst tag = payload.subarray(payload.length - 16);\n\t\tconst ciphertext = payload.subarray(0, payload.length - 16);\n\n\t\tconst decipher = crypto.createDecipheriv(\"aes-256-gcm\", key, iv);\n\t\tdecipher.setAAD(aad);\n\t\tdecipher.setAuthTag(tag);\n\n\t\treturn Buffer.concat([decipher.update(ciphertext), decipher.final()]);\n\t},\n};\n"]}