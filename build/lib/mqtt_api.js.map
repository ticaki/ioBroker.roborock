{"version":3,"file":"mqtt_api.js","sourceRoot":"","sources":["../../src/lib/mqtt_api.ts"],"names":[],"mappings":";;;;;;AACA,gDAAwC;AAExC,oDAA4B;AAC5B,iDAAuC;AACvC,gDAAwB;AAExB,mCAAmC;AACnC,MAAM,iBAAiB,GAAG,IAAI,sBAAM,EAAE;KACpC,SAAS,CAAC,QAAQ,CAAC;KACnB,MAAM,CAAC,UAAU,EAAE;IACnB,MAAM,EAAE,EAAE;IACV,SAAS,EAAE,IAAI;CACf,CAAC;KACD,KAAK,CAAC,UAAU,CAAC;KACjB,MAAM,CAAC,IAAI,CAAC;KACZ,MAAM,CAAC,UAAU,EAAE;IACnB,MAAM,EAAE,CAAC;CACT,CAAC,CAAC;AAEJ,wBAAwB;AACxB,MAAM,WAAW,GAAG,IAAI,sBAAM,EAAE;KAC9B,SAAS,CAAC,QAAQ,CAAC;KACnB,MAAM,CAAC,UAAU,EAAE;IACnB,MAAM,EAAE,CAAC;IACT,SAAS,EAAE,IAAI;CACf,CAAC;KACD,KAAK,CAAC,IAAI,CAAC,CAAC;AAEd,MAAa,QAAQ;IACpB,OAAO,CAAW;IAClB,QAAQ,CAAS;IACjB,YAAY,CAAS;IACrB,MAAM,CAAoB;IAC1B,SAAS,CAAU;IACnB,oBAAoB,CAAsB;IAC1C,WAAW,CAAM;IAEjB,YAAY,OAAiB;QAC5B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAEvB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QAEnB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAEvB,yCAAyC;QACzC,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,IAAI;QACT,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,eAAe;QACd,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;QAEhD,0DAA0D;QAC1D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACtE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QAEvE,IAAI,CAAC,WAAW,GAAG;YAClB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,IAAI,CAAC,YAAY;YAC3B,SAAS,EAAE,EAAE;SACb,CAAC;IACH,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY;QACjB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;QAChD,MAAM,MAAM,GAAG,cAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACzD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC;YACJ,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;YACzC,MAAM,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;YAE1C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACvB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YAChB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,kCAAkC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAC1E,oBAAoB;YACpB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,MAAM,CAAC,kBAAkB,EAAE,CAAC;YAC5B,MAAM,CAAC,GAAG,EAAE,CAAC;QACd,CAAC;IACF,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,qBAAqB,CAAC,MAAM;QACjC,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;QAEhD,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE;YAC/B,IAAI,MAAM,EAAE,CAAC;gBACZ,mCAAmC;gBACnC,MAAM,CAAC,SAAS,CAAC,UAAU,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;oBAC3E,IAAI,KAAK,EAAE,CAAC;wBACX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,uDAAuD,KAAK,cAAc,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;oBAC7H,CAAC;gBACF,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBACtB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,+BAA+B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACjF,CAAC;iBAAM,CAAC;gBACP,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,+CAA+C,EAAE,sBAAsB,CAAC,CAAC;YACjG,CAAC;QACF,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;YAC5B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;YAC5C,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,EAAE;YAC7B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,0BAA0B,MAAM,gBAAgB,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;YACxG,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;YACvB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;YACjD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,KAAK,EAAE,EAAE;YAChC,IAAI,KAAK,EAAE,CAAC;gBACX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,qCAAqC,EAAE,uBAAuB,CAAC,CAAC;YACxF,CAAC;iBAAM,CAAC;gBACP,MAAM,CAAC,SAAS,CAAC,UAAU,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;oBAC3E,IAAI,KAAK,EAAE,CAAC;wBACX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,uDAAuD,KAAK,cAAc,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,EAAE,wBAAwB,CAAC,CAAC;oBACvJ,CAAC;gBACF,CAAC,CAAC,CAAC;YACJ,CAAC;YACD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;YACzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;YACxD,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACxB,CAAC,CAAC,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,sBAAsB,CAAC,MAAM;QAClC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAE7C,MAAM,CAAC,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;YAC7C,IAAI,CAAC;gBACJ,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3C,iEAAiE;gBACjE,2MAA2M;gBAC3M,kKAAkK;gBAClK,8HAA8H;gBAE9H,wDAAwD;gBACxD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBAErF,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAChF,uJAAuJ;gBACvJ,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE,CAAC;oBAChC,wDAAwD;oBACxD,IAAI,IAAI,CAAC,OAAO,IAAI,KAAK,EAAE,CAAC;wBAC3B,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC/C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,wBAAwB,IAAI,wCAAwC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;wBAC7H,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;oBACpD,CAAC;yBAAM,IAAI,IAAI,CAAC,QAAQ,IAAI,GAAG,EAAE,CAAC;wBACjC,+EAA+E;wBAC/E,kDAAkD;wBAClD,IAAI,GAAG,CAAC;wBACR,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,WAAW,EAAE,CAAC;4BAC/D,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;wBACvD,CAAC;6BAAM,CAAC;4BACP,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC;wBACpC,CAAC;wBACD,0IAA0I;wBAE1I,6IAA6I;wBAC7I,IAAI,GAAG,CAAC,MAAM,IAAI,IAAI,EAAE,CAAC;4BACxB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,qBAAqB,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;wBACvF,CAAC;oBACF,CAAC;yBAAM,IAAI,IAAI,CAAC,QAAQ,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,IAAI,GAAG,EAAE,CAAC;wBACzD,2CAA2C;wBAC3C,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;oBACtC,CAAC;yBAAM,IAAI,IAAI,CAAC,QAAQ,IAAI,GAAG,EAAE,CAAC;wBACjC,kDAAkD;wBAClD,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;wBACjD,IAAI,UAAU,CAAC;wBAEf,IAAI,CAAC;4BACJ,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;wBACrC,CAAC;wBAAC,OAAO,KAAK,EAAE,CAAC;4BAChB,2EAA2E;4BAC3E,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,+BAA+B,IAAI,YAAY,KAAK,CAAC,OAAO,WAAW,UAAU,EAAE,CAAC,CAAC;4BAC3G,OAAO;wBACR,CAAC;wBAED,IAAI,UAAU,CAAC,MAAM,IAAI,KAAK,EAAE,CAAC;4BAChC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,wCAAwC,IAAI,cAAc,CAAC,CAAC;wBACnF,CAAC;6BAAM,IAAI,UAAU,CAAC,MAAM,IAAI,IAAI,EAAE,CAAC;4BACtC,0CAA0C;wBAC3C,CAAC;6BAAM,IAAI,UAAU,CAAC,WAAW,EAAE,CAAC;4BACnC,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,CAAC;4BAC/D,MAAM,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC,eAAe,EAAE,QAAQ,CAAC;4BAErE,IAAI,SAAS,EAAE,CAAC;gCACf,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,4BAA4B,SAAS,EAAE,CAAC,CAAC;4BAC9E,CAAC;4BAED,IAAI,WAAW,KAAK,SAAS,EAAE,CAAC;gCAC/B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,8BAA8B,WAAW,GAAG,CAAC,CAAC;4BACnF,CAAC;wBACF,CAAC;6BAAM,CAAC;4BACP,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,wCAAwC,IAAI,WAAW,UAAU,EAAE,CAAC,CAAC;wBAC5F,CAAC;oBACF,CAAC;yBAAM,CAAC;wBACP,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,0CAA0C,IAAI,CAAC,QAAQ,UAAU,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACjH,CAAC;gBACF,CAAC;YACF,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBAChB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,sBAAsB,KAAK,CAAC,KAAK,eAAe,KAAK,gBAAgB,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACxH,CAAC;QACF,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ;QACnC,IAAI,IAAI,CAAC,QAAQ,KAAK,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,KAAK,UAAU,EAAE,CAAC;YACpF,oCAAoC;YACpC,MAAM,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAClD,IAAI,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC;gBACpD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,0CAA0C,SAAS,CAAC,EAAE,GAAG,CAAC,CAAC;gBAClF,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG;oBACzC,MAAM,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE,wBAAwB;iBAC1D,CAAC;YACH,CAAC;QACF,CAAC;aAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,GAAG,EAAE,CAAC;YAClC,0DAA0D;YAC1D,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC;gBAC1E,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,2CAA2C,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;gBACtF,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAErE,qDAAqD;gBACrD,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;gBACvF,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnG,CAAC;iBAAM,CAAC;gBACP,wDAAwD;gBACxD,MAAM,UAAU,GAAG,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACzE,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,KAAK,UAAU,EAAE,CAAC;oBAC3D,MAAM,SAAS,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAClD,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,gDAAgD,SAAS,CAAC,EAAE,YAAY,CAAC,CAAC;oBAEjG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,qBAAqB,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACzG,kBAAkB;gBAClB,CAAC;qBAAM,IAAI,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;oBACrD,qCAAqC;oBACrC,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBAC/B,MAAM,QAAQ,GAAG,gBAAM,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;oBAChF,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBAChG,MAAM,QAAQ,GAAG,cAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;oBAE5C,sDAAsD;oBACtD,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,qBAAqB,CAAC,UAAU,CAAC,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC5F,CAAC;YACF,CAAC;QACF,CAAC;IACF,CAAC;IAED;;;;OAIG;IACH,gBAAgB,CAAC,SAAS;QACzB,MAAM,GAAG,GAAG,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC9D,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjE,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,cAAc;QACnB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;QAEhD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;QAC9D,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;YAChC,iDAAiD;YACjD,MAAM,cAAc,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC/E,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,EAAE,EAAE,GAAG,EAAE,cAAc,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;YACjF,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,qCAAqC,cAAc,EAAE,CAAC,CAAC;YAC7E,OAAO,cAAc,CAAC;QACvB,CAAC;aAAM,CAAC;YACP,OAAO,QAAQ,CAAC,GAAG,CAAC;QACrB,CAAC;IACF,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,eAAe;QACtC,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC;QAEhD,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE,EAAE,eAAe,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;QAChG,CAAC;IACF,CAAC;IAED;;;OAGG;IACH,WAAW;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB;QACrB,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,IAAI,CAAC;gBACJ,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;gBACpD,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;YAC9B,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBAChB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,oCAAoC,KAAK,EAAE,EAAE,kBAAkB,CAAC,CAAC;YACzF,CAAC;QACF,CAAC;IACF,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,GAAG;QACT,OAAO,gBAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3D,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,GAAG;QACT,OAAO,gBAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;IACtD,CAAC;IAED;;OAEG;IACH,cAAc;QACb,qEAAqE;QACrE,yCAAyC;QACzC,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,OAAO;QACN,uDAAuD;QACvD,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QACnB,CAAC;QACD,oCAAoC;QACpC,IAAI,CAAC,cAAc,EAAE,CAAC;IACvB,CAAC;CACD;AA3WD,4BA2WC","sourcesContent":["import type { Roborock } from \"../main\";\r\nimport mqtt, { MqttClient } from \"mqtt\";\r\n\r\nimport crypto from \"crypto\";\r\nimport { Parser } from \"binary-parser\";\r\nimport zlib from \"zlib\";\r\n\r\n// Parser for protocol 301 messages\r\nconst protocol301Parser = new Parser()\r\n\t.endianess(\"little\")\r\n\t.string(\"endpoint\", {\r\n\t\tlength: 15,\r\n\t\tstripNull: true,\r\n\t})\r\n\t.uint8(\"unknown1\")\r\n\t.uint16(\"id\")\r\n\t.buffer(\"unknown2\", {\r\n\t\tlength: 6,\r\n\t});\r\n\r\n// Parser for photo data\r\nconst photoParser = new Parser()\r\n\t.endianess(\"little\")\r\n\t.string(\"roborock\", {\r\n\t\tlength: 8,\r\n\t\tstripNull: true,\r\n\t})\r\n\t.uint8(\"id\");\r\n\r\nexport class mqtt_api {\r\n\tadapter: Roborock;\r\n\tmqttUser: string;\r\n\tmqttPassword: string;\r\n\tclient: MqttClient | null;\r\n\tconnected: boolean;\r\n\tpendingPhotoRequests: Record<string, any>;\r\n\tmqttOptions: any;\r\n\r\n\tconstructor(adapter: Roborock) {\r\n\t\tthis.adapter = adapter;\r\n\r\n\t\tthis.mqttUser = \"\";\r\n\t\tthis.mqttPassword = \"\";\r\n\t\tthis.client = null;\r\n\r\n\t\tthis.connected = false;\r\n\r\n\t\t// Object to store pending photo requests\r\n\t\tthis.pendingPhotoRequests = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes the MQTT API.\r\n\t */\r\n\tasync init() {\r\n\t\tthis.setup_mqtt_user();\r\n\t\tawait this.connect_mqtt();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up the MQTT user credentials.\r\n\t */\r\n\tsetup_mqtt_user() {\r\n\t\tconst rriot = this.adapter.http_api.get_rriot();\r\n\r\n\t\t// Generate MQTT username and password based on rriot data\r\n\t\tthis.mqttUser = this.md5hex(rriot.u + \":\" + rriot.k).substring(2, 10);\r\n\t\tthis.mqttPassword = this.md5hex(rriot.s + \":\" + rriot.k).substring(16);\r\n\r\n\t\tthis.mqttOptions = {\r\n\t\t\tclientId: this.mqttUser,\r\n\t\t\tusername: this.mqttUser,\r\n\t\t\tpassword: this.mqttPassword,\r\n\t\t\tkeepalive: 30,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Connects to the MQTT broker.\r\n\t */\r\n\tasync connect_mqtt() {\r\n\t\tconst rriot = this.adapter.http_api.get_rriot();\r\n\t\tconst client = mqtt.connect(rriot.r.m, this.mqttOptions);\r\n\t\tthis.client = client;\r\n\r\n\t\ttry {\r\n\t\t\tawait this.subscribe_mqtt_events(client);\r\n\t\t\tawait this.subscribe_mqtt_message(client);\r\n\r\n\t\t\tthis.connected = true;\r\n\t\t} catch (error) {\r\n\t\t\tthis.adapter.log.error(`MQTT connection failed. Error: ${error.message}`);\r\n\t\t\t// Do not retry here\r\n\t\t\tthis.connected = false;\r\n\t\t\tclient.removeAllListeners();\r\n\t\t\tclient.end();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Subscribes to MQTT events.\r\n\t * @param {object} client - The MQTT client.\r\n\t */\r\n\tasync subscribe_mqtt_events(client) {\r\n\t\tconst rriot = this.adapter.http_api.get_rriot();\r\n\r\n\t\tclient.on(\"connect\", (result) => {\r\n\t\t\tif (result) {\r\n\t\t\t\t// Subscribe to the necessary topic\r\n\t\t\t\tclient.subscribe(`rr/m/o/${rriot.u}/${this.mqttUser}/#`, (error, granted) => {\r\n\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\tthis.adapter.log.error(`Failed to subscribe to Roborock MQTT Server! Error: ${error}, granted: ${JSON.stringify(granted)}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.connected = true;\r\n\t\t\t\tthis.adapter.log.info(`MQTT connection established ${JSON.stringify(result)}.`);\r\n\t\t\t} else {\r\n\t\t\t\tthis.adapter.log.error(\"MQTT connection failed: No result on connect.\", \"client.on('connect')\");\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tclient.on(\"disconnect\", () => {\r\n\t\t\tthis.adapter.log.info(`MQTT disconnected.`);\r\n\t\t\tthis.connected = false;\r\n\t\t});\r\n\r\n\t\tclient.on(\"error\", (result) => {\r\n\t\t\tthis.adapter.log.error(`MQTT connection error: ${result}. rriot.r.m: ${rriot.r.m} rriot.u: ${rriot.u}`);\r\n\t\t\tthis.connected = false;\r\n\t\t});\r\n\r\n\t\tclient.on(\"close\", () => {\r\n\t\t\tthis.adapter.log.info(`MQTT connection closed.`);\r\n\t\t\tthis.connected = false;\r\n\t\t});\r\n\r\n\t\tclient.on(\"reconnect\", (error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\tthis.adapter.log.error(`Failed to reconnect to MQTT server.`, \"mqtt client reconnect\");\r\n\t\t\t} else {\r\n\t\t\t\tclient.subscribe(`rr/m/o/${rriot.u}/${this.mqttUser}/#`, (error, granted) => {\r\n\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\tthis.adapter.log.error(`Failed to subscribe to Roborock MQTT Server! Error: ${error}, granted: ${JSON.stringify(granted)}`, \"client.on('reconnect')\");\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.adapter.log.info(`MQTT connection reconnect.`);\r\n\t\t});\r\n\r\n\t\tclient.on(\"offline\", () => {\r\n\t\t\tthis.adapter.log.error(\"MQTT connection went offline.\");\r\n\t\t\tthis.connected = false;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Subscribes to MQTT messages.\r\n\t * @param {object} client - The MQTT client.\r\n\t */\r\n\tasync subscribe_mqtt_message(client) {\r\n\t\tconst endpoint = await this.ensureEndpoint();\r\n\r\n\t\tclient.on(\"message\", async (topic, message) => {\r\n\t\t\ttry {\r\n\t\t\t\tconst duid = topic.split(\"/\").slice(-1)[0];\r\n\t\t\t\t// const localKeys = this.adapter.http_api.getMatchedLocalKeys();\r\n\t\t\t\t// this.adapter.log.debug(`MESSAGE RECEIVED for duid ${duid} with key: ${localKeys.get(duid)} data: ${JSON.stringify(data)} raw: ${JSON.stringify(mqttMessageParser.parse(message))} message: ${message}`);\r\n\t\t\t\t// this.adapter.log.debug(`MESSAGE RECEIVED for duid ${duid} with key: ${localKeys.get(duid)} data: ${JSON.stringify(data.toString(\"hex\"))} message: ${message}`);\r\n\t\t\t\t// this.adapter.log.debug(`MESSAGE RECEIVED for duid ${duid} with key: ${localKeys.get(duid)} data: ${JSON.stringify(data)}`);\r\n\r\n\t\t\t\t// this.adapter.log.debug(\"Protocol: \" + data.protocol);\r\n\t\t\t\tconst dataArr = this.adapter.requestsHandler.messageParser._decodeMsg(message, duid);\r\n\r\n\t\t\t\tconst allMessages = Array.isArray(dataArr) ? dataArr : dataArr ? [dataArr] : [];\r\n\t\t\t\t// this.adapter.log.debug(`Received ${allMessages.length} messages for duid ${duid} with topic ${topic} allMessages: ${JSON.stringify(allMessages)}.`);\r\n\t\t\t\tfor (const data of allMessages) {\r\n\t\t\t\t\t// this.adapter.log.debug(\"Protocol: \" + data.protocol);\r\n\t\t\t\t\tif (data.version == \"A01\") {\r\n\t\t\t\t\t\tconst parsedPayload = JSON.parse(data.payload);\r\n\t\t\t\t\t\tthis.adapter.log.debug(`Received message for ${duid} with protocol A01 and parsedPayload ${JSON.stringify(parsedPayload)}.`);\r\n\t\t\t\t\t\tawait this.adapter.processA01(duid, parsedPayload);\r\n\t\t\t\t\t} else if (data.protocol == 102) {\r\n\t\t\t\t\t\t// sometimes JSON.parse(data.payload).dps[\"102\"] is not a JSON. Check for this!\r\n\t\t\t\t\t\t// Handle protocol 102 (general command responses)\r\n\t\t\t\t\t\tlet dps;\r\n\t\t\t\t\t\tif (typeof JSON.parse(data.payload).dps[\"102\"] != \"undefined\") {\r\n\t\t\t\t\t\t\tdps = JSON.parse(JSON.parse(data.payload).dps[\"102\"]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdps = JSON.parse(data.payload).dps;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// this.adapter.log.debug(`Cloud message for ${duid} with protocol 102 and id ${dps.id} received. Result: ${JSON.stringify(dps.result)}`);\r\n\r\n\t\t\t\t\t\t// special check for secure request like get_map_v1 etc. Don't process if result is OK. Instead wait for the actual response for protocol 301\r\n\t\t\t\t\t\tif (dps.result != \"ok\") {\r\n\t\t\t\t\t\t\tthis.adapter.requestsHandler.resolvePendingRequest(dps.id, dps.result, data.protocol);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (data.protocol == 300 || data.protocol == 301) {\r\n\t\t\t\t\t\t// Handle protocol 300 and 301 (photo data)\r\n\t\t\t\t\t\tthis.handlePhotoData(data, endpoint);\r\n\t\t\t\t\t} else if (data.protocol == 500) {\r\n\t\t\t\t\t\t// Handle protocol 500 (device status information)\r\n\t\t\t\t\t\tconst dataString = data.payload.toString(\"utf8\");\r\n\t\t\t\t\t\tlet parsedData;\r\n\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tparsedData = JSON.parse(dataString);\r\n\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t// If parsing fails, the data might be corrupted or in an unexpected format\r\n\t\t\t\t\t\t\tthis.adapter.log.warn(`Unable to parse message for ${duid}. Error: ${error.message}. Data: ${dataString}`);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (parsedData.online == false) {\r\n\t\t\t\t\t\t\tthis.adapter.log.info(`Couldn't process message. The device ${duid} is offline.`);\r\n\t\t\t\t\t\t} else if (parsedData.online == true) {\r\n\t\t\t\t\t\t\t// Device online status - no action needed\r\n\t\t\t\t\t\t} else if (parsedData.mqttOtaData) {\r\n\t\t\t\t\t\t\tconst otaStatus = parsedData.mqttOtaData.mqttOtaStatus?.status;\r\n\t\t\t\t\t\t\tconst otaProgress = parsedData.mqttOtaData.mqttOtaProgress?.progress;\r\n\r\n\t\t\t\t\t\t\tif (otaStatus) {\r\n\t\t\t\t\t\t\t\tthis.adapter.log.info(`Device ${duid} firmware update status: ${otaStatus}`);\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif (otaProgress !== undefined) {\r\n\t\t\t\t\t\t\t\tthis.adapter.log.info(`Device ${duid} firmware update progress: ${otaProgress}%`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.adapter.log.warn(`Received an unrecognized message for ${duid}. Data: ${dataString}`);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.adapter.log.warn(`Received message with unknown protocol ${data.protocol} data: ${JSON.stringify(data)}.`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthis.adapter.log.error(`client.on message: ${error.stack} with topic ${topic} and message ${message.toString(\"hex\")}`);\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.adapter.log.info(`MQTT initialized`);\r\n\t}\r\n\r\n\t/**\r\n\t * Handles photo data received in chunks (protocol 300 and 301).\r\n\t * @param {object} data - The received data.\r\n\t * @param {string} endpoint - The endpoint.\r\n\t */\r\n\tasync handlePhotoData(data, endpoint) {\r\n\t\tif (data.protocol === 300 && data.payload.subarray(0, 8).toString() === \"ROBOROCK\") {\r\n\t\t\t// Handle the first chunk of a photo\r\n\t\t\tconst photoData = photoParser.parse(data.payload);\r\n\t\t\tif (this.adapter.pendingRequests.has(photoData.id)) {\r\n\t\t\t\tthis.adapter.log.debug(`First photo gzip chunk detected for ID ${photoData.id}!`);\r\n\t\t\t\tthis.pendingPhotoRequests[photoData.id] = {\r\n\t\t\t\t\tchunks: [data.payload.slice(56)], // Store the first chunk\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t} else if (data.protocol === 301) {\r\n\t\t\t// Handle subsequent chunks or other protocol 301 messages\r\n\t\t\tif (data.seq === 2 && this.pendingPhotoRequests[data.payload.id]?.chunks) {\r\n\t\t\t\tthis.adapter.log.debug(`Second photo gzip chunk detected for ID ${data.payload.id}!`);\r\n\t\t\t\tthis.pendingPhotoRequests[data.payload.id].chunks.push(data.payload);\r\n\r\n\t\t\t\t// If we have all chunks, resolve the pending request\r\n\t\t\t\tconst photoDataGzip = Buffer.concat(this.pendingPhotoRequests[data.payload.id].chunks);\r\n\t\t\t\tthis.adapter.requestsHandler.resolvePendingRequest(data.payload.id, photoDataGzip, data.protocol);\r\n\t\t\t} else {\r\n\t\t\t\t// Handle other protocol 301 messages (not photo chunks)\r\n\t\t\t\tconst parsedData = protocol301Parser.parse(data.payload.subarray(0, 24));\r\n\t\t\t\tif (data.payload.subarray(0, 8).toString() === \"ROBOROCK\") {\r\n\t\t\t\t\tconst photoData = photoParser.parse(data.payload);\r\n\t\t\t\t\tthis.adapter.log.debug(`Cloud message with protocol 301 and photo id ${photoData.id} received.`);\r\n\r\n\t\t\t\t\tthis.adapter.requestsHandler.resolvePendingRequest(photoData.id, data.payload.slice(56), data.protocol);\r\n\t\t\t\t// Handle map data\r\n\t\t\t\t} else if (endpoint.startsWith(parsedData.endpoint)) {\r\n\t\t\t\t\t// Decrypt and decompress the message\r\n\t\t\t\t\tconst iv = Buffer.alloc(16, 0);\r\n\t\t\t\t\tconst decipher = crypto.createDecipheriv(\"aes-128-cbc\", this.adapter.nonce, iv);\r\n\t\t\t\t\tconst decrypted = Buffer.concat([decipher.update(data.payload.subarray(24)), decipher.final()]);\r\n\t\t\t\t\tconst unzipped = zlib.gunzipSync(decrypted);\r\n\r\n\t\t\t\t\t// Resolve the pending request with the decrypted data\r\n\t\t\t\t\tthis.adapter.requestsHandler.resolvePendingRequest(parsedData.id, unzipped, data.protocol);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Encodes a timestamp into a specific format.\r\n\t * @param {number} timestamp - The timestamp to encode.\r\n\t * @returns {string} The encoded timestamp.\r\n\t */\r\n\t_encodeTimestamp(timestamp) {\r\n\t\tconst hex = timestamp.toString(16).padStart(8, \"0\").split(\"\");\r\n\t\treturn [5, 6, 3, 7, 1, 2, 0, 4].map((idx) => hex[idx]).join(\"\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ensures that an endpoint exists, generating one if necessary.\r\n\t * @returns {Promise<string>} A promise that resolves with the endpoint.\r\n\t */\r\n\tasync ensureEndpoint() {\r\n\t\tconst rriot = this.adapter.http_api.get_rriot();\r\n\r\n\t\tconst endpoint = await this.adapter.getStateAsync(\"endpoint\");\r\n\t\tif (!endpoint || !endpoint.val) {\r\n\t\t\t// Generate a random endpoint if it doesn't exist\r\n\t\t\tconst randomEndpoint = this.md5bin(rriot.k).subarray(8, 14).toString(\"base64\");\r\n\t\t\tawait this.adapter.setStateAsync(\"endpoint\", { val: randomEndpoint, ack: true });\r\n\t\t\tthis.adapter.log.info(`Generated and saved new endpoint: ${randomEndpoint}`);\r\n\t\t\treturn randomEndpoint;\r\n\t\t} else {\r\n\t\t\treturn endpoint.val;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sends a message to the MQTT broker.\r\n\t * @param {string} duid - The device unique ID.\r\n\t * @param {Buffer} roborockMessage - The message to send.\r\n\t */\r\n\tasync sendMessage(duid, roborockMessage) {\r\n\t\tconst rriot = this.adapter.http_api.get_rriot();\r\n\r\n\t\tif (this.client) {\r\n\t\t\tthis.client.publish(`rr/m/i/${rriot.u}/${this.mqttUser}/${duid}`, roborockMessage, { qos: 1 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the MQTT client is connected.\r\n\t * @returns {boolean} True if connected, false otherwise.\r\n\t */\r\n\tisConnected() {\r\n\t\treturn this.connected;\r\n\t}\r\n\r\n\t/**\r\n\t * Disconnects the MQTT client.\r\n\t */\r\n\tasync disconnectClient() {\r\n\t\tif (this.client) {\r\n\t\t\ttry {\r\n\t\t\t\tthis.adapter.log.info(\"Disconnecting mqtt client!\");\r\n\t\t\t\tawait this.client.endAsync();\r\n\t\t\t} catch (error) {\r\n\t\t\t\tthis.adapter.log.error(`Failed to disconnect with error: ${error}`, `disconnectClient`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the MD5 hash of a string (hexadecimal representation).\r\n\t * @param {string} str - The string to hash.\r\n\t * @returns {string} The MD5 hash in hexadecimal format.\r\n\t */\r\n\tmd5hex(str) {\r\n\t\treturn crypto.createHash(\"md5\").update(str).digest(\"hex\");\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the MD5 hash of a string (binary representation).\r\n\t * @param {string} str - The string to hash.\r\n\t * @returns {Buffer} The MD5 hash in binary format.\r\n\t */\r\n\tmd5bin(str) {\r\n\t\treturn crypto.createHash(\"md5\").update(str).digest();\r\n\t}\r\n\r\n\t/**\r\n\t * Clears any intervals or timers used by mqtt_api.\r\n\t */\r\n\tclearIntervals() {\r\n\t\t// If there were any intervals or timers, they would be cleared here.\r\n\t\t// For now, reset pending photo requests.\r\n\t\tthis.pendingPhotoRequests = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Cleanup resources used by mqtt_api before disposal.\r\n\t */\r\n\tcleanup() {\r\n\t\t// Disconnect the client and remove all event listeners\r\n\t\tif (this.client) {\r\n\t\t\tthis.client.removeAllListeners();\r\n\t\t\tthis.client.end();\r\n\t\t}\r\n\t\t// Clear any intervals/timers if any\r\n\t\tthis.clearIntervals();\r\n\t}\r\n}\r\n"]}